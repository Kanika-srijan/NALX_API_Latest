{
	"info": {
		"_postman_id": "351315a1-2e14-421d-9673-8016dade6258",
		"name": "NALX 2 - API Automation kanika",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "POST - OKTA Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9a031e6-4645-4c49-8e4d-a87a24a871f5",
						"exec": [
							"",
							"if(responseCode.code==200)",
							"{",
							"",
							"",
							"//Storing Common Tests in an Anonymous Function and then assigning that function in a Variable",
							"    var CommonTests_NALX =()=>",
							"    //code to verify response headers and their values",
							"    {",
							"       pm.test(\"Verify Response Headers and their Values\",function(){",
							"       pm.response.to.be.header(\"Content-Type\",\"application/json\");",
							"       pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
							"    });",
							"        ",
							"      ",
							"        ",
							"   //code to verify Response Time",
							"    pm.test(\"Verify the Response Time\",function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);    ",
							"    });",
							"    }",
							"",
							"   ",
							"   ",
							"  //code to set Common Tests Variable into a Global Variable after Converting it into a String",
							"    pm.globals.set(\"CommonTests_NALX\",CommonTests_NALX.toString());",
							"",
							"",
							"",
							"  //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"   //code to verify Blank Array In Response",
							"   pm.test(\"Blank Response Verification\",function(){",
							"   pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"  //storing schema in a variable",
							"  var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"token_type\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"expires_in\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"access_token\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"okta_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"langCode\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"token_type\",",
							"    \"expires_in\",",
							"    \"access_token\",",
							"    \"okta_url\",",
							"    \"langCode\",",
							"    \"message\"",
							"  ]",
							"}",
							"",
							"",
							"",
							"//code to verify schema with Response Body",
							"//false -check recursive",
							"//true - ban unknown properties",
							"//true - Overall result to be true",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData,schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//call CommonTests Variable",
							"CommonTests_NALX();",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Verify value of keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.token_type).to.not.eql(\"\");",
							"pm.expect(jsonData.expires_in).to.not.eql(\"\");",
							"pm.expect(jsonData.access_token).to.not.eql(\"\");",
							"pm.expect(jsonData.okta_url).to.not.eql(\"\");",
							"pm.expect(jsonData.langCode).to.not.eql(\"\");",
							"pm.expect(jsonData.message).to.not.eql(\"\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"//code to verify some of the key values that are static",
							"pm.test(\"Verify key values that are static\",function(){",
							"pm.expect(jsonData.token_type).to.eql(\"Bearer\");",
							"pm.expect(jsonData.message).to.eql(\"User login data successfuly saved in table.\");",
							"})",
							"",
							"",
							"",
							"//fetch token_type,access_token and OKTA url from response body and store them in Environment Variables",
							"pm.environment.set(\"token_type\",jsonData.token_type);",
							"pm.environment.set(\"access_key\",jsonData.access_token);",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							"    pm.test(\"Status code is not 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"username\": \"{{username}}\",\n\"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/login/oauth?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"login",
						"oauth"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "OAuth Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "769e3adb-dd32-4371-a5ec-1e4580f3becf",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"",
							"if(get_username == \"FEdnewman@mailinator.com\")",
							"{",
							" pm.test(\"Status code is 401 as we are logged in through FE\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"error\": \"invalid_client\",",
							"    \"error_description\": \"Client authentication failed\",",
							"    \"message\": \"Client authentication failed\"",
							"});",
							"});}",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							" ",
							" //code to verify Blank Array In Response",
							"  pm.test(\"Blank Response Verification\",function(){",
							"  pm.expect(jsonData.length).to.not.eql(0);",
							"  });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//code to verify response headers and their values",
							"    {",
							"       pm.test(\"Verify Response Headers and their Values\",function(){",
							"       pm.response.to.be.header(\"Content-Type\",\"application/json; charset=UTF-8\");",
							"       pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
							"    });",
							"",
							"",
							"//code to verify Response Time",
							"    pm.test(\"Verify the Response Time\",function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);    ",
							"    });",
							"    }",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"token_type\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"expires_in\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"access_token\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"refresh_token\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"token_type\",",
							"    \"expires_in\",",
							"    \"access_token\",",
							"    \"refresh_token\"",
							"  ]",
							"}",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Verify value of keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.token_type).to.not.eql(\"\");",
							"pm.expect(jsonData.expires_in).to.not.eql(\"\");",
							"pm.expect(jsonData.access_token).to.not.eql(\"\");",
							"pm.expect(jsonData.refresh_token).to.not.eql(\"\");",
							"});",
							"",
							"",
							"//code to verify key value that will be static",
							"pm.test(\"Verify key values that are static\",function(){",
							"pm.expect(jsonData.token_type).to.eql(\"Bearer\");",
							"});",
							"}",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "grant_type=password&username={{username}}&password={{password}}&client_id=74b5d18a-60df-48eb-a467-c42d22dca57a&client_secret=nalx123"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/oauth/token?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"oauth",
						"token"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - OAuth Debug",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00d9da90-3f21-4cbe-bdab-feabbff64193",
						"exec": [
							"",
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"//parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"   ",
							"   //code to verify Blank Array In Response",
							"   pm.test(\"Blank Response Verification\",function(){",
							"   pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"   ",
							" ",
							" //Fetch Id from the response and store it in an Environment Variable",
							" pm.environment.set(\"user_id\",jsonData.id);",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"token\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"string\"",
							"        }",
							"      ]",
							"    },",
							"    \"id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"roles\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"string\"",
							"        }",
							"      ]",
							"    },",
							"    \"permissions\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"administer blocks\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer comment types\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer comments\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own comments\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"post comments\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"skip comment approval\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access comments\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete conditional fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit conditional fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view conditional fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"export configuration\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"import configuration\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"synchronize configuration\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer consumer entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"description\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"add consumer entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own consumer entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"update own consumer entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view own consumer entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer contact forms\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access site-wide contact form\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access user contact forms\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer content translation\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create content translations\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete content translations\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"update content translations\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate my_accounts_level node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate education_my_accounts node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate badges node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate blogs node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate brand node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate brand_values node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate business_level node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate business_module node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate my_roles_level node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate my_role node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate culture_level node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate culture_module node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate education node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate experiences node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate featured_content node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate featured_product node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate in_focus node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate infocus_modules node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate leadership node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate leadership_level node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate leadership_module node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate policies_level node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate policies_module node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate resources node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate my_development_level node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate my_development node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate my_coes_level node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate my_coes node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate whats_new node\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate accounts taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate badge_category taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate brand taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate brand_categories taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate content_category taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate door taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate employment_category taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate evaluation_score taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate evaluation_category taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate feedback taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate groups taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate job_title taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate market taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate module_category taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate module_types taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate product_categories taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate region taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate role taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate static_labels taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate super_territory taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate tags taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate territory taxonomy_term\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate paragraph\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate block_content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate any entity\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access contextual links\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer crop\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer crop types\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access kint\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access draggableviews\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer elasticsearch cluster\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer elasticsearch connector\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer elasticsearch index\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access media_entity_browser entity browser pages\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer entity browsers\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete orphan revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer comment display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer contact_message display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer node display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer block_content display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer media display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer paragraph display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer taxonomy_term display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer user display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer lx_proficiency_pdf_entity display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer comment fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer contact_message fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer node fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer block_content fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer media fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer paragraph fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer taxonomy_term fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer user fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer lx_proficiency_pdf_entity fields\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer comment form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer contact_message form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer node form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer block_content form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer media form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer paragraph form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer taxonomy_term form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer user form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer lx_proficiency_pdf_entity form display\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer display modes\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access files overview\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer filters\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"use text format basic_html\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"use text format full_html\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"use text format restricted_html\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer image styles\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"translate interface\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"badges allocation of ba\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"badges allocation of fe\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"evaluation of ba\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"evaluation of fe\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"promote of ba\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"promote of fe\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access lx proficiency pdf entity overview\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer lx proficiency pdf entity entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"add lx proficiency pdf entity entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete lx proficiency pdf entity entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit lx proficiency pdf entity entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view published lx proficiency pdf entity entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view unpublished lx proficiency pdf entity entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access user import mapping field\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer languages\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer_mailsystem\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"bypass maxlength\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create audio media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create file media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create image media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create video media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any audio media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any file media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any image media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any video media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own audio media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own file media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own image media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own video media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any audio media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any file media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any image media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any video media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own audio media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own file media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own image media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own video media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access media overview\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer media types\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"update any media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"update media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view all media revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view own unpublished media\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer module missing message fixer\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create my_accounts_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create education_my_accounts content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create badges content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create blogs content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create brand content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create brand_values content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create business_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create business_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create my_roles_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create my_role content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create culture_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create culture_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create education content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create experiences content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create featured_content content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create featured_product content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create in_focus content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create infocus_modules content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create leadership content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create leadership_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create leadership_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create policies_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create policies_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create resources content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create my_development_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create my_development content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create my_coes_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create my_coes content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create whats_new content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any my_accounts_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any education_my_accounts content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any badges content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any blogs content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any brand content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any brand_values content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any business_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any business_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any my_roles_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any my_role content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any culture_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any culture_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any education content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any experiences content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any featured_content content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any featured_product content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any in_focus content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any infocus_modules content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any leadership content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any leadership_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any leadership_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any policies_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any policies_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any resources content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any my_development_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any my_development content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any my_coes_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any my_coes content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete any whats_new content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own my_accounts_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own education_my_accounts content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own badges content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own blogs content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own brand content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own brand_values content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own business_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own business_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own my_roles_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own my_role content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own culture_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own culture_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own education content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own experiences content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own featured_content content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own featured_product content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own in_focus content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own infocus_modules content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own leadership content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own leadership_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own leadership_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own policies_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own policies_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own resources content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own my_development_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own my_development content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own my_coes_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own my_coes content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own whats_new content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete my_accounts_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete education_my_accounts revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete badges revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete blogs revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete brand revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete brand_values revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete business_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete business_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete my_roles_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete my_role revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete culture_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete culture_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete education revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete experiences revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete featured_content revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete featured_product revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete in_focus revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete infocus_modules revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete leadership revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete leadership_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete leadership_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete policies_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete policies_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete resources revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete my_development_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete my_development revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete my_coes_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete my_coes revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete whats_new revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any my_accounts_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any education_my_accounts content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any badges content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any blogs content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any brand content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any brand_values content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any business_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any business_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any my_roles_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any my_role content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any culture_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any culture_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any education content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any experiences content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any featured_content content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any featured_product content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any in_focus content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any infocus_modules content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any leadership content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any leadership_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any leadership_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any policies_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any policies_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any resources content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any my_development_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any my_development content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any my_coes_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any my_coes content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit any whats_new content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own my_accounts_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own education_my_accounts content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own badges content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own blogs content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own brand content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own brand_values content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own business_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own business_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own my_roles_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own my_role content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own culture_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own culture_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own education content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own experiences content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own featured_content content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own featured_product content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own in_focus content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own infocus_modules content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own leadership content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own leadership_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own leadership_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own policies_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own policies_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own resources content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own my_development_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own my_development content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own my_coes_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own my_coes content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit own whats_new content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert my_accounts_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert education_my_accounts revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert badges revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert blogs revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert brand revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert brand_values revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert business_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert business_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert my_roles_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert my_role revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert culture_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert culture_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert education revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert experiences revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert featured_content revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert featured_product revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert in_focus revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert infocus_modules revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert leadership revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert leadership_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert leadership_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert policies_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert policies_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert resources revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert my_development_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert my_development revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert my_coes_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert my_coes revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert whats_new revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view my_accounts_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view education_my_accounts revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view badges revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view blogs revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view brand revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view brand_values revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view business_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view business_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view my_roles_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view my_role revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view culture_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view culture_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view education revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view experiences revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view featured_content revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view featured_product revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view in_focus revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view infocus_modules revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view leadership revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view leadership_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view leadership_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view policies_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view policies_module revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view resources revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view my_development_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view my_development revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view my_coes_level revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view my_coes revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view whats_new revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access content overview\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer nodes\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer content types\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"bypass node access\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete all revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"revert all revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view all revisions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view own unpublished content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer paragraphs settings\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer paragraphs types\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit behavior plugin settings\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view unpublished paragraphs\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer url aliases\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create url aliases\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer pathauto\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"notify of path changes\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"admin queue_ui\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access in-place editing\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone my_accounts_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone education_my_accounts content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone badges content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone blogs content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone brand content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone brand_values content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone business_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone business_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone my_roles_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone my_role content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone culture_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone culture_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone education content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone experiences content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone featured_content content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone featured_product content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone in_focus content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone infocus_modules content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone leadership content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone leadership_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone leadership_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone policies_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone policies_module content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone resources content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone my_development_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone my_development content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone my_coes_level content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone my_coes content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"clone whats_new content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"Administer Quick Node Clone Settings\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get brand_stats_value\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get aggregated_score\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get evaluation_categories\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get language_switcher\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get module_tag_filter\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get password_policy_help_text\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get sharepoints\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get static_label_translate\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get user_details\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful get user_detail_score\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post change_learners_picture\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post change_user_picture\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post change_user_password\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post blog_comments_delete\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post module_progress_status\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post user_okta_login\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post user_okta_logout\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post blog_comments_post\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post save_evaluation_email_data\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post save_user_badges_data\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post update_user_language\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post user_data_import\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"restful post user_registration\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer rest resources\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer search\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"use advanced search\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"search content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer search_api\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer sendgrid settings\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer shortcuts\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"customize shortcut links\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"switch shortcut sets\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access shortcuts\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer simpleautologout\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer simple_oauth entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"add simple_oauth entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete own simple_oauth entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"update own simple_oauth entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view own simple_oauth entities\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"grant simple_oauth codes\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer menu\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer modules\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer site configuration\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer software updates\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer themes\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"link to any page\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access administration pages\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access site in maintenance mode\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access content\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access site reports\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"view the administration theme\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in accounts\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in badge_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in brand\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in brand_categories\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in content_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in door\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in employment_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in evaluation_score\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in evaluation_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in feedback\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in groups\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in job_title\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in market\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in module_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in module_types\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in product_categories\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in region\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in role\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in static_labels\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in super_territory\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in tags\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"create terms in territory\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in accounts\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in badge_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in brand\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in brand_categories\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in content_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in door\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in employment_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in evaluation_score\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in evaluation_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in feedback\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in groups\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in job_title\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in market\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in module_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in module_types\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in product_categories\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in region\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in role\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in static_labels\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in super_territory\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in tags\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"delete terms in territory\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in accounts\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in badge_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in brand\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in brand_categories\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in content_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in door\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in employment_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in evaluation_score\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in evaluation_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in feedback\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in groups\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in job_title\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in market\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in module_category\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in module_types\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in product_categories\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in region\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in role\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in static_labels\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in super_territory\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in tags\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"edit terms in territory\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access taxonomy overview\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer taxonomy\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access toolbar\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access tour\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer type style\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer account settings\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer permissions\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer users\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"cancel account\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"change own username\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"select account cancellation method\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"access user profiles\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"userprotect.administer\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"userprotect.bypass_all\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"userprotect.administrator_role_protection.bypass\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"userprotect.authenticate_user_protection.bypass\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"userprotect.site_admin_role_protection.bypass\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"userprotect.account.edit\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"userprotect.mail.edit\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"userprotect.pass.edit\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        },",
							"        \"administer views\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"access\": {",
							"              \"type\": \"boolean\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"access\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"administer blocks\",",
							"        \"administer comment types\",",
							"        \"administer comments\",",
							"        \"edit own comments\",",
							"        \"post comments\",",
							"        \"skip comment approval\",",
							"        \"access comments\",",
							"        \"delete conditional fields\",",
							"        \"edit conditional fields\",",
							"        \"view conditional fields\",",
							"        \"export configuration\",",
							"        \"import configuration\",",
							"        \"synchronize configuration\",",
							"        \"administer consumer entities\",",
							"        \"description\",",
							"        \"add consumer entities\",",
							"        \"delete own consumer entities\",",
							"        \"update own consumer entities\",",
							"        \"view own consumer entities\",",
							"        \"administer contact forms\",",
							"        \"access site-wide contact form\",",
							"        \"access user contact forms\",",
							"        \"administer content translation\",",
							"        \"create content translations\",",
							"        \"delete content translations\",",
							"        \"update content translations\",",
							"        \"translate my_accounts_level node\",",
							"        \"translate education_my_accounts node\",",
							"        \"translate badges node\",",
							"        \"translate blogs node\",",
							"        \"translate brand node\",",
							"        \"translate brand_values node\",",
							"        \"translate business_level node\",",
							"        \"translate business_module node\",",
							"        \"translate my_roles_level node\",",
							"        \"translate my_role node\",",
							"        \"translate culture_level node\",",
							"        \"translate culture_module node\",",
							"        \"translate education node\",",
							"        \"translate experiences node\",",
							"        \"translate featured_content node\",",
							"        \"translate featured_product node\",",
							"        \"translate in_focus node\",",
							"        \"translate infocus_modules node\",",
							"        \"translate leadership node\",",
							"        \"translate leadership_level node\",",
							"        \"translate leadership_module node\",",
							"        \"translate policies_level node\",",
							"        \"translate policies_module node\",",
							"        \"translate resources node\",",
							"        \"translate my_development_level node\",",
							"        \"translate my_development node\",",
							"        \"translate my_coes_level node\",",
							"        \"translate my_coes node\",",
							"        \"translate whats_new node\",",
							"        \"translate accounts taxonomy_term\",",
							"        \"translate badge_category taxonomy_term\",",
							"        \"translate brand taxonomy_term\",",
							"        \"translate brand_categories taxonomy_term\",",
							"        \"translate content_category taxonomy_term\",",
							"        \"translate door taxonomy_term\",",
							"        \"translate employment_category taxonomy_term\",",
							"        \"translate evaluation_score taxonomy_term\",",
							"        \"translate evaluation_category taxonomy_term\",",
							"        \"translate feedback taxonomy_term\",",
							"        \"translate groups taxonomy_term\",",
							"        \"translate job_title taxonomy_term\",",
							"        \"translate market taxonomy_term\",",
							"        \"translate module_category taxonomy_term\",",
							"        \"translate module_types taxonomy_term\",",
							"        \"translate product_categories taxonomy_term\",",
							"        \"translate region taxonomy_term\",",
							"        \"translate role taxonomy_term\",",
							"        \"translate static_labels taxonomy_term\",",
							"        \"translate super_territory taxonomy_term\",",
							"        \"translate tags taxonomy_term\",",
							"        \"translate territory taxonomy_term\",",
							"        \"translate paragraph\",",
							"        \"translate block_content\",",
							"        \"translate any entity\",",
							"        \"access contextual links\",",
							"        \"administer crop\",",
							"        \"administer crop types\",",
							"        \"access kint\",",
							"        \"access draggableviews\",",
							"        \"administer elasticsearch cluster\",",
							"        \"administer elasticsearch connector\",",
							"        \"administer elasticsearch index\",",
							"        \"access media_entity_browser entity browser pages\",",
							"        \"administer entity browsers\",",
							"        \"delete orphan revisions\",",
							"        \"administer comment display\",",
							"        \"administer contact_message display\",",
							"        \"administer node display\",",
							"        \"administer block_content display\",",
							"        \"administer media display\",",
							"        \"administer paragraph display\",",
							"        \"administer taxonomy_term display\",",
							"        \"administer user display\",",
							"        \"administer lx_proficiency_pdf_entity display\",",
							"        \"administer comment fields\",",
							"        \"administer contact_message fields\",",
							"        \"administer node fields\",",
							"        \"administer block_content fields\",",
							"        \"administer media fields\",",
							"        \"administer paragraph fields\",",
							"        \"administer taxonomy_term fields\",",
							"        \"administer user fields\",",
							"        \"administer lx_proficiency_pdf_entity fields\",",
							"        \"administer comment form display\",",
							"        \"administer contact_message form display\",",
							"        \"administer node form display\",",
							"        \"administer block_content form display\",",
							"        \"administer media form display\",",
							"        \"administer paragraph form display\",",
							"        \"administer taxonomy_term form display\",",
							"        \"administer user form display\",",
							"        \"administer lx_proficiency_pdf_entity form display\",",
							"        \"administer display modes\",",
							"        \"access files overview\",",
							"        \"administer filters\",",
							"        \"use text format basic_html\",",
							"        \"use text format full_html\",",
							"        \"use text format restricted_html\",",
							"        \"administer image styles\",",
							"        \"translate interface\",",
							"        \"badges allocation of ba\",",
							"        \"badges allocation of fe\",",
							"        \"evaluation of ba\",",
							"        \"evaluation of fe\",",
							"        \"promote of ba\",",
							"        \"promote of fe\",",
							"        \"access lx proficiency pdf entity overview\",",
							"        \"administer lx proficiency pdf entity entities\",",
							"        \"add lx proficiency pdf entity entities\",",
							"        \"delete lx proficiency pdf entity entities\",",
							"        \"edit lx proficiency pdf entity entities\",",
							"        \"view published lx proficiency pdf entity entities\",",
							"        \"view unpublished lx proficiency pdf entity entities\",",
							"        \"access user import mapping field\",",
							"        \"administer languages\",",
							"        \"administer_mailsystem\",",
							"        \"bypass maxlength\",",
							"        \"create audio media\",",
							"        \"create file media\",",
							"        \"create image media\",",
							"        \"create video media\",",
							"        \"delete any audio media\",",
							"        \"delete any file media\",",
							"        \"delete any image media\",",
							"        \"delete any video media\",",
							"        \"delete own audio media\",",
							"        \"delete own file media\",",
							"        \"delete own image media\",",
							"        \"delete own video media\",",
							"        \"edit any audio media\",",
							"        \"edit any file media\",",
							"        \"edit any image media\",",
							"        \"edit any video media\",",
							"        \"edit own audio media\",",
							"        \"edit own file media\",",
							"        \"edit own image media\",",
							"        \"edit own video media\",",
							"        \"access media overview\",",
							"        \"administer media\",",
							"        \"administer media types\",",
							"        \"create media\",",
							"        \"delete any media\",",
							"        \"delete media\",",
							"        \"update any media\",",
							"        \"update media\",",
							"        \"view all media revisions\",",
							"        \"view media\",",
							"        \"view own unpublished media\",",
							"        \"administer module missing message fixer\",",
							"        \"create my_accounts_level content\",",
							"        \"create education_my_accounts content\",",
							"        \"create badges content\",",
							"        \"create blogs content\",",
							"        \"create brand content\",",
							"        \"create brand_values content\",",
							"        \"create business_level content\",",
							"        \"create business_module content\",",
							"        \"create my_roles_level content\",",
							"        \"create my_role content\",",
							"        \"create culture_level content\",",
							"        \"create culture_module content\",",
							"        \"create education content\",",
							"        \"create experiences content\",",
							"        \"create featured_content content\",",
							"        \"create featured_product content\",",
							"        \"create in_focus content\",",
							"        \"create infocus_modules content\",",
							"        \"create leadership content\",",
							"        \"create leadership_level content\",",
							"        \"create leadership_module content\",",
							"        \"create policies_level content\",",
							"        \"create policies_module content\",",
							"        \"create resources content\",",
							"        \"create my_development_level content\",",
							"        \"create my_development content\",",
							"        \"create my_coes_level content\",",
							"        \"create my_coes content\",",
							"        \"create whats_new content\",",
							"        \"delete any my_accounts_level content\",",
							"        \"delete any education_my_accounts content\",",
							"        \"delete any badges content\",",
							"        \"delete any blogs content\",",
							"        \"delete any brand content\",",
							"        \"delete any brand_values content\",",
							"        \"delete any business_level content\",",
							"        \"delete any business_module content\",",
							"        \"delete any my_roles_level content\",",
							"        \"delete any my_role content\",",
							"        \"delete any culture_level content\",",
							"        \"delete any culture_module content\",",
							"        \"delete any education content\",",
							"        \"delete any experiences content\",",
							"        \"delete any featured_content content\",",
							"        \"delete any featured_product content\",",
							"        \"delete any in_focus content\",",
							"        \"delete any infocus_modules content\",",
							"        \"delete any leadership content\",",
							"        \"delete any leadership_level content\",",
							"        \"delete any leadership_module content\",",
							"        \"delete any policies_level content\",",
							"        \"delete any policies_module content\",",
							"        \"delete any resources content\",",
							"        \"delete any my_development_level content\",",
							"        \"delete any my_development content\",",
							"        \"delete any my_coes_level content\",",
							"        \"delete any my_coes content\",",
							"        \"delete any whats_new content\",",
							"        \"delete own my_accounts_level content\",",
							"        \"delete own education_my_accounts content\",",
							"        \"delete own badges content\",",
							"        \"delete own blogs content\",",
							"        \"delete own brand content\",",
							"        \"delete own brand_values content\",",
							"        \"delete own business_level content\",",
							"        \"delete own business_module content\",",
							"        \"delete own my_roles_level content\",",
							"        \"delete own my_role content\",",
							"        \"delete own culture_level content\",",
							"        \"delete own culture_module content\",",
							"        \"delete own education content\",",
							"        \"delete own experiences content\",",
							"        \"delete own featured_content content\",",
							"        \"delete own featured_product content\",",
							"        \"delete own in_focus content\",",
							"        \"delete own infocus_modules content\",",
							"        \"delete own leadership content\",",
							"        \"delete own leadership_level content\",",
							"        \"delete own leadership_module content\",",
							"        \"delete own policies_level content\",",
							"        \"delete own policies_module content\",",
							"        \"delete own resources content\",",
							"        \"delete own my_development_level content\",",
							"        \"delete own my_development content\",",
							"        \"delete own my_coes_level content\",",
							"        \"delete own my_coes content\",",
							"        \"delete own whats_new content\",",
							"        \"delete my_accounts_level revisions\",",
							"        \"delete education_my_accounts revisions\",",
							"        \"delete badges revisions\",",
							"        \"delete blogs revisions\",",
							"        \"delete brand revisions\",",
							"        \"delete brand_values revisions\",",
							"        \"delete business_level revisions\",",
							"        \"delete business_module revisions\",",
							"        \"delete my_roles_level revisions\",",
							"        \"delete my_role revisions\",",
							"        \"delete culture_level revisions\",",
							"        \"delete culture_module revisions\",",
							"        \"delete education revisions\",",
							"        \"delete experiences revisions\",",
							"        \"delete featured_content revisions\",",
							"        \"delete featured_product revisions\",",
							"        \"delete in_focus revisions\",",
							"        \"delete infocus_modules revisions\",",
							"        \"delete leadership revisions\",",
							"        \"delete leadership_level revisions\",",
							"        \"delete leadership_module revisions\",",
							"        \"delete policies_level revisions\",",
							"        \"delete policies_module revisions\",",
							"        \"delete resources revisions\",",
							"        \"delete my_development_level revisions\",",
							"        \"delete my_development revisions\",",
							"        \"delete my_coes_level revisions\",",
							"        \"delete my_coes revisions\",",
							"        \"delete whats_new revisions\",",
							"        \"edit any my_accounts_level content\",",
							"        \"edit any education_my_accounts content\",",
							"        \"edit any badges content\",",
							"        \"edit any blogs content\",",
							"        \"edit any brand content\",",
							"        \"edit any brand_values content\",",
							"        \"edit any business_level content\",",
							"        \"edit any business_module content\",",
							"        \"edit any my_roles_level content\",",
							"        \"edit any my_role content\",",
							"        \"edit any culture_level content\",",
							"        \"edit any culture_module content\",",
							"        \"edit any education content\",",
							"        \"edit any experiences content\",",
							"        \"edit any featured_content content\",",
							"        \"edit any featured_product content\",",
							"        \"edit any in_focus content\",",
							"        \"edit any infocus_modules content\",",
							"        \"edit any leadership content\",",
							"        \"edit any leadership_level content\",",
							"        \"edit any leadership_module content\",",
							"        \"edit any policies_level content\",",
							"        \"edit any policies_module content\",",
							"        \"edit any resources content\",",
							"        \"edit any my_development_level content\",",
							"        \"edit any my_development content\",",
							"        \"edit any my_coes_level content\",",
							"        \"edit any my_coes content\",",
							"        \"edit any whats_new content\",",
							"        \"edit own my_accounts_level content\",",
							"        \"edit own education_my_accounts content\",",
							"        \"edit own badges content\",",
							"        \"edit own blogs content\",",
							"        \"edit own brand content\",",
							"        \"edit own brand_values content\",",
							"        \"edit own business_level content\",",
							"        \"edit own business_module content\",",
							"        \"edit own my_roles_level content\",",
							"        \"edit own my_role content\",",
							"        \"edit own culture_level content\",",
							"        \"edit own culture_module content\",",
							"        \"edit own education content\",",
							"        \"edit own experiences content\",",
							"        \"edit own featured_content content\",",
							"        \"edit own featured_product content\",",
							"        \"edit own in_focus content\",",
							"        \"edit own infocus_modules content\",",
							"        \"edit own leadership content\",",
							"        \"edit own leadership_level content\",",
							"        \"edit own leadership_module content\",",
							"        \"edit own policies_level content\",",
							"        \"edit own policies_module content\",",
							"        \"edit own resources content\",",
							"        \"edit own my_development_level content\",",
							"        \"edit own my_development content\",",
							"        \"edit own my_coes_level content\",",
							"        \"edit own my_coes content\",",
							"        \"edit own whats_new content\",",
							"        \"revert my_accounts_level revisions\",",
							"        \"revert education_my_accounts revisions\",",
							"        \"revert badges revisions\",",
							"        \"revert blogs revisions\",",
							"        \"revert brand revisions\",",
							"        \"revert brand_values revisions\",",
							"        \"revert business_level revisions\",",
							"        \"revert business_module revisions\",",
							"        \"revert my_roles_level revisions\",",
							"        \"revert my_role revisions\",",
							"        \"revert culture_level revisions\",",
							"        \"revert culture_module revisions\",",
							"        \"revert education revisions\",",
							"        \"revert experiences revisions\",",
							"        \"revert featured_content revisions\",",
							"        \"revert featured_product revisions\",",
							"        \"revert in_focus revisions\",",
							"        \"revert infocus_modules revisions\",",
							"        \"revert leadership revisions\",",
							"        \"revert leadership_level revisions\",",
							"        \"revert leadership_module revisions\",",
							"        \"revert policies_level revisions\",",
							"        \"revert policies_module revisions\",",
							"        \"revert resources revisions\",",
							"        \"revert my_development_level revisions\",",
							"        \"revert my_development revisions\",",
							"        \"revert my_coes_level revisions\",",
							"        \"revert my_coes revisions\",",
							"        \"revert whats_new revisions\",",
							"        \"view my_accounts_level revisions\",",
							"        \"view education_my_accounts revisions\",",
							"        \"view badges revisions\",",
							"        \"view blogs revisions\",",
							"        \"view brand revisions\",",
							"        \"view brand_values revisions\",",
							"        \"view business_level revisions\",",
							"        \"view business_module revisions\",",
							"        \"view my_roles_level revisions\",",
							"        \"view my_role revisions\",",
							"        \"view culture_level revisions\",",
							"        \"view culture_module revisions\",",
							"        \"view education revisions\",",
							"        \"view experiences revisions\",",
							"        \"view featured_content revisions\",",
							"        \"view featured_product revisions\",",
							"        \"view in_focus revisions\",",
							"        \"view infocus_modules revisions\",",
							"        \"view leadership revisions\",",
							"        \"view leadership_level revisions\",",
							"        \"view leadership_module revisions\",",
							"        \"view policies_level revisions\",",
							"        \"view policies_module revisions\",",
							"        \"view resources revisions\",",
							"        \"view my_development_level revisions\",",
							"        \"view my_development revisions\",",
							"        \"view my_coes_level revisions\",",
							"        \"view my_coes revisions\",",
							"        \"view whats_new revisions\",",
							"        \"access content overview\",",
							"        \"administer nodes\",",
							"        \"administer content types\",",
							"        \"bypass node access\",",
							"        \"delete all revisions\",",
							"        \"revert all revisions\",",
							"        \"view all revisions\",",
							"        \"view own unpublished content\",",
							"        \"administer paragraphs settings\",",
							"        \"administer paragraphs types\",",
							"        \"edit behavior plugin settings\",",
							"        \"view unpublished paragraphs\",",
							"        \"administer url aliases\",",
							"        \"create url aliases\",",
							"        \"administer pathauto\",",
							"        \"notify of path changes\",",
							"        \"admin queue_ui\",",
							"        \"access in-place editing\",",
							"        \"clone my_accounts_level content\",",
							"        \"clone education_my_accounts content\",",
							"        \"clone badges content\",",
							"        \"clone blogs content\",",
							"        \"clone brand content\",",
							"        \"clone brand_values content\",",
							"        \"clone business_level content\",",
							"        \"clone business_module content\",",
							"        \"clone my_roles_level content\",",
							"        \"clone my_role content\",",
							"        \"clone culture_level content\",",
							"        \"clone culture_module content\",",
							"        \"clone education content\",",
							"        \"clone experiences content\",",
							"        \"clone featured_content content\",",
							"        \"clone featured_product content\",",
							"        \"clone in_focus content\",",
							"        \"clone infocus_modules content\",",
							"        \"clone leadership content\",",
							"        \"clone leadership_level content\",",
							"        \"clone leadership_module content\",",
							"        \"clone policies_level content\",",
							"        \"clone policies_module content\",",
							"        \"clone resources content\",",
							"        \"clone my_development_level content\",",
							"        \"clone my_development content\",",
							"        \"clone my_coes_level content\",",
							"        \"clone my_coes content\",",
							"        \"clone whats_new content\",",
							"        \"Administer Quick Node Clone Settings\",",
							"        \"restful get brand_stats_value\",",
							"        \"restful get aggregated_score\",",
							"        \"restful get evaluation_categories\",",
							"        \"restful get language_switcher\",",
							"        \"restful get module_tag_filter\",",
							"        \"restful get password_policy_help_text\",",
							"        \"restful get sharepoints\",",
							"        \"restful get static_label_translate\",",
							"        \"restful get user_details\",",
							"        \"restful get user_detail_score\",",
							"        \"restful post change_learners_picture\",",
							"        \"restful post change_user_picture\",",
							"        \"restful post change_user_password\",",
							"        \"restful post blog_comments_delete\",",
							"        \"restful post module_progress_status\",",
							"        \"restful post user_okta_login\",",
							"        \"restful post user_okta_logout\",",
							"        \"restful post blog_comments_post\",",
							"        \"restful post save_evaluation_email_data\",",
							"        \"restful post save_user_badges_data\",",
							"        \"restful post update_user_language\",",
							"        \"restful post user_data_import\",",
							"        \"restful post user_registration\",",
							"        \"administer rest resources\",",
							"        \"administer search\",",
							"        \"use advanced search\",",
							"        \"search content\",",
							"        \"administer search_api\",",
							"        \"administer sendgrid settings\",",
							"        \"administer shortcuts\",",
							"        \"customize shortcut links\",",
							"        \"switch shortcut sets\",",
							"        \"access shortcuts\",",
							"        \"administer simpleautologout\",",
							"        \"administer simple_oauth entities\",",
							"        \"add simple_oauth entities\",",
							"        \"delete own simple_oauth entities\",",
							"        \"update own simple_oauth entities\",",
							"        \"view own simple_oauth entities\",",
							"        \"grant simple_oauth codes\",",
							"        \"administer menu\",",
							"        \"administer modules\",",
							"        \"administer site configuration\",",
							"        \"administer software updates\",",
							"        \"administer themes\",",
							"        \"link to any page\",",
							"        \"access administration pages\",",
							"        \"access site in maintenance mode\",",
							"        \"access content\",",
							"        \"access site reports\",",
							"        \"view the administration theme\",",
							"        \"create terms in accounts\",",
							"        \"create terms in badge_category\",",
							"        \"create terms in brand\",",
							"        \"create terms in brand_categories\",",
							"        \"create terms in content_category\",",
							"        \"create terms in door\",",
							"        \"create terms in employment_category\",",
							"        \"create terms in evaluation_score\",",
							"        \"create terms in evaluation_category\",",
							"        \"create terms in feedback\",",
							"        \"create terms in groups\",",
							"        \"create terms in job_title\",",
							"        \"create terms in market\",",
							"        \"create terms in module_category\",",
							"        \"create terms in module_types\",",
							"        \"create terms in product_categories\",",
							"        \"create terms in region\",",
							"        \"create terms in role\",",
							"        \"create terms in static_labels\",",
							"        \"create terms in super_territory\",",
							"        \"create terms in tags\",",
							"        \"create terms in territory\",",
							"        \"delete terms in accounts\",",
							"        \"delete terms in badge_category\",",
							"        \"delete terms in brand\",",
							"        \"delete terms in brand_categories\",",
							"        \"delete terms in content_category\",",
							"        \"delete terms in door\",",
							"        \"delete terms in employment_category\",",
							"        \"delete terms in evaluation_score\",",
							"        \"delete terms in evaluation_category\",",
							"        \"delete terms in feedback\",",
							"        \"delete terms in groups\",",
							"        \"delete terms in job_title\",",
							"        \"delete terms in market\",",
							"        \"delete terms in module_category\",",
							"        \"delete terms in module_types\",",
							"        \"delete terms in product_categories\",",
							"        \"delete terms in region\",",
							"        \"delete terms in role\",",
							"        \"delete terms in static_labels\",",
							"        \"delete terms in super_territory\",",
							"        \"delete terms in tags\",",
							"        \"delete terms in territory\",",
							"        \"edit terms in accounts\",",
							"        \"edit terms in badge_category\",",
							"        \"edit terms in brand\",",
							"        \"edit terms in brand_categories\",",
							"        \"edit terms in content_category\",",
							"        \"edit terms in door\",",
							"        \"edit terms in employment_category\",",
							"        \"edit terms in evaluation_score\",",
							"        \"edit terms in evaluation_category\",",
							"        \"edit terms in feedback\",",
							"        \"edit terms in groups\",",
							"        \"edit terms in job_title\",",
							"        \"edit terms in market\",",
							"        \"edit terms in module_category\",",
							"        \"edit terms in module_types\",",
							"        \"edit terms in product_categories\",",
							"        \"edit terms in region\",",
							"        \"edit terms in role\",",
							"        \"edit terms in static_labels\",",
							"        \"edit terms in super_territory\",",
							"        \"edit terms in tags\",",
							"        \"edit terms in territory\",",
							"        \"access taxonomy overview\",",
							"        \"administer taxonomy\",",
							"        \"access toolbar\",",
							"        \"access tour\",",
							"        \"administer type style\",",
							"        \"administer account settings\",",
							"        \"administer permissions\",",
							"        \"administer users\",",
							"        \"cancel account\",",
							"        \"change own username\",",
							"        \"select account cancellation method\",",
							"        \"access user profiles\",",
							"        \"userprotect.administer\",",
							"        \"userprotect.bypass_all\",",
							"        \"userprotect.administrator_role_protection.bypass\",",
							"        \"userprotect.authenticate_user_protection.bypass\",",
							"        \"userprotect.site_admin_role_protection.bypass\",",
							"        \"userprotect.account.edit\",",
							"        \"userprotect.mail.edit\",",
							"        \"userprotect.pass.edit\",",
							"        \"administer views\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"token\",",
							"    \"id\",",
							"    \"roles\",",
							"    \"permissions\"",
							"  ]",
							"}",
							"",
							"   ",
							"// //code to verify schema with Response Body",
							"// pm.test('Schema is valid', function() {",
							"//   pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"// });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.token).to.not.eql(\"\");",
							"pm.expect(jsonData.id).to.not.eql(\"\");",
							"pm.expect(jsonData.role).to.not.eql(\"\");",
							"pm.expect(jsonData.permissions).to.not.eql(\"\");",
							"});",
							"",
							"",
							"var token_value = pm.environment.get(\"access_key\");",
							"",
							"",
							"//code to verify static key values in Response",
							"pm.test(\"Code to Verify Static key values in Response\",function(){",
							"pm.expect(jsonData.token[0]).to.eql(token_value);",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/oauth/debug?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"oauth",
						"debug"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				},
				"description": "The Oauth API to debug the user information."
			},
			"response": []
		},
		{
			"name": "User Language Update API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ebf6bf9-8114-433c-bf56-1857b91754c4",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							" ",
							"  //code to verify Blank Array In Response",
							"   pm.test(\"Blank Response Verification\",function(){",
							"   pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"status\": {",
							"      \"type\": \"boolean\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"message\",",
							"    \"status\"",
							"  ]",
							"}  ",
							"",
							"",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.message).to.not.eql(\"\");",
							"pm.expect(jsonData.status).to.not.eql(\"\");",
							"});",
							"",
							"",
							"",
							"//code to verify static key values in Response",
							"pm.test(\"Code to Verify Static key values in Response\",function(){",
							"pm.expect(jsonData.message).to.eql(\"Language updated.\");",
							"pm.expect(jsonData.status).to.eql(true);",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"languageCode\": \"en\" }"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/updateUserLanguage?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"updateUserLanguage"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Disclaimer and Policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5ec0da4-b390-492f-b70a-4374b91dac6a",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"    \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							" \r",
							" //code to verify Blank Array In Response\r",
							"   pm.test(\"Blank Response Verification\",function(){\r",
							"   pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"title\",\r",
							"    \"description\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//code to verify values of keys that cannot be set as null\r",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							"pm.expect(jsonData.title).to.not.eql(\"\");\r",
							"pm.expect(jsonData.description).to.not.eql(\"\");\r",
							"});\r",
							"}\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/disclaimer-policy?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"disclaimer-policy"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "type",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - FE Profile Picture",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b918a467-34be-49a8-b925-8df1d2f5bafe",
						"exec": [
							"if(responseCode.code === 201)\r",
							"{\r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							" \r",
							" //code to verify Blank Array In Response\r",
							"   pm.test(\"Blank Response Verification\",function(){\r",
							"   pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"userImage\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"message\",\r",
							"    \"userImage\"\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"  var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//code to verify values of keys that cannot be set as null\r",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							"pm.expect(jsonData.message).to.not.eql(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//code to verify static key values in Response\r",
							"pm.test(\"Code to Verify Static key values in Response\",function(){\r",
							"pm.expect(jsonData.message).to.eql(\"User profile picture updated successfully.\");\r",
							"});\r",
							"}\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"filename\": \"test3fdf.jpg\",\r\n\"filesize\": \"1\",\r\n\"width\" :200,\r\n\"height\": 20000,\r\n\"image\": \"\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v2/user/profile/picture?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v2",
						"user",
						"profile",
						"picture"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "08881858-b935-412f-b191-0371658b921e",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							" ",
							"//code to verify Blank Array In Response",
							"pm.test(\"Blank Response Verification\",function(){",
							"pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"uuid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"fieldBrandColor\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"fieldBrandLogo\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"fieldBrandImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"isElc\": {",
							"          \"type\": \"boolean\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"nid\",",
							"        \"uuid\",",
							"        \"title\",",
							"        \"fieldBrandColor\",",
							"        \"fieldBrandLogo\",",
							"        \"fieldBrandImage\",",
							"        \"isElc\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							" pm.expect(jsonData[i].uuid).to.not.eql(\"\");",
							" pm.expect(jsonData[i].title).to.not.eql(\"\");",
							" pm.expect(jsonData[i].fieldBrandColor).to.not.eql(\"\");",
							" pm.expect(jsonData[i].fieldBrandLogo).to.not.eql(\"\");",
							" pm.expect(jsonData[i].fieldBrandImage).to.not.eql(\"\");",
							" pm.expect(jsonData[i].isElc).to.not.eql(\"\");",
							" }",
							" });",
							" ",
							" ",
							"",
							"",
							"//fetching first Elc Brand nid and store it in a Environment Variable",
							"for(i=0;i<count;i++)",
							"{",
							"  if((jsonData[i].isElc)==true) ",
							"  {",
							"      pm.environment.set(\"elc_brandid\",jsonData[i].nid);",
							"      break;",
							"  }",
							"}",
							"",
							"",
							"//fetching first Brand nid and store it in a Environment Variable",
							"for(i=0;i<count;i++)",
							"{",
							"  if((jsonData[i].isElc)==false) ",
							"  {",
							"      pm.environment.set(\"brand_id\",jsonData[i].nid);",
							"      break;",
							"  }",
							"}",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v2/brands?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v2",
						"brands"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand Logo",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f706f2f-d429-4f32-b439-ccef1c684d2c",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							" //code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"field_brand_logo\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"field_brand_logo\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.field_brand_logo).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/logo/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"logo",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand Values",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b987a93-82e1-4da1-a2be-ec97c5cdedc7",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							" \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							" \r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"brandCategory\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandCategoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"nid\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"title\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldBrandName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDescription\": {\r",
							"                  \"type\": \"null\"\r",
							"                },\r",
							"                \"brandValueModuleType\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDocument\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldBrandValuesImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"points\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"progress\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"nid\",\r",
							"                \"title\",\r",
							"                \"fieldBrandName\",\r",
							"                \"fieldDescription\",\r",
							"                \"brandValueModuleType\",\r",
							"                \"fieldDocument\",\r",
							"                \"fieldBrandValuesImage\",\r",
							"                \"points\",\r",
							"                \"progress\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"brandCategory\",\r",
							"        \"brandCategoryId\",\r",
							"        \"data\"\r",
							"      ]\r",
							"}\r",
							"]\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"  \r",
							"  \r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"  count1=jsonData[i].data.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].data[j].nid).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].title).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldBrandName).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].brandValueModuleType).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldDocument).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldBrandValuesImaget).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							" });\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/values/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"values",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand About",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ad6da31-bc58-49ad-850e-3a6f82bb46dc",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							" \r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"field_brand_logo\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"field_brand_logo\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"// //code to verify schema with Response Body\r",
							"// pm.test('Schema is valid', function() {\r",
							"//   pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"// });\r",
							"\r",
							"\r",
							"//code to verify values of keys that cannot be set as null\r",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							"pm.expect(jsonData.field_brand_logo).to.not.eql(\"\");\r",
							"});\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/about/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"about",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand Infocus",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ab97ec5f-3736-4d94-a546-fe9518bd74ff",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"inFocusImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"inFocusDescription\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"points\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"nid\",",
							"        \"title\",",
							"        \"inFocusImage\",",
							"        \"inFocusDescription\",",
							"        \"points\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].inFocusImage).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"//code to fetch the nid of first Level and store it in an Environment Variable",
							"pm.environment.set(\"Infocus_Level\",jsonData[0].nid);",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/infocus/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"infocus",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Infocus Module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e6752b08-c90d-40b6-8806-eac59014b953",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"nid\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"inFocusModuleImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"inFocusModuleDescription\": {\r",
							"        },\r",
							"        \"inFocusFileType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"inFocusLink\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"inFocusModuleType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"inFocusModuleDocument\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"nid\",\r",
							"        \"title\",\r",
							"        \"inFocusModuleImage\",\r",
							"        \"inFocusModuleDescription\",\r",
							"        \"inFocusFileType\",\r",
							"        \"inFocusLink\",\r",
							"        \"inFocusModuleType\",\r",
							"        \"inFocusModuleDocument\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//code to verify values of keys that cannot be set as null\r",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							"pm.expect(jsonData.nid).to.not.eql(\"\");\r",
							"pm.expect(jsonData.title).to.not.eql(\"\");\r",
							"pm.expect(jsonData.inFocusModuleImage).to.not.eql(\"\");\r",
							"pm.expect(jsonData.inFocusFileType).to.not.eql(\"\");\r",
							"pm.expect(jsonData.inFocusModuleType).to.not.eql(\"\");\r",
							"pm.expect(jsonData.inFocusModuleDocument).to.not.eql(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"//code to fetch the nid of first module and store it in an Environment Variable\r",
							"pm.environment.set(\"Infocus_Module\",jsonData[0].nid);\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/infocus/module/{{Infocus_Level}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"infocus",
						"module",
						"{{Infocus_Level}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand Featured Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d53b9b09-c195-4ca5-a4e1-634e99f4b776",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							" \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"brandCategory\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandCategoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"nid\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"title\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDescription\": {\r",
							"                  \"type\": \"null\"\r",
							"                },\r",
							"                \"featuredProductModuleType\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDocument\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldFeaturedProductImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"points\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"type\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"progress\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"nid\",\r",
							"                \"title\",\r",
							"                \"fieldDescription\",\r",
							"                \"featuredProductModuleType\",\r",
							"                \"fieldDocument\",\r",
							"                \"fieldFeaturedProductImage\",\r",
							"                \"points\",\r",
							"                \"type\",\r",
							"                \"progress\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"brandCategory\",\r",
							"        \"brandCategoryId\",\r",
							"        \"data\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"  \r",
							"  \r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"  count1=jsonData[i].data.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].data[j].nid).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].title).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].featuredProductModuleType).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldDocument).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldFeaturedProductImage).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							" });\r",
							"}\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/featured/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"featured",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand Experience",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "367d2bb6-558f-4d12-90e6-27ab304d8aa2",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							" \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"    \r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"brandCategory\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandCategoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"nid\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"title\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDescription\": {\r",
							"                  \"type\": \"null\"\r",
							"                },\r",
							"                \"fieldExperiencesImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"experienceModuleType\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDocument\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"points\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"progress\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"nid\",\r",
							"                \"title\",\r",
							"                \"fieldDescription\",\r",
							"                \"fieldExperiencesImage\",\r",
							"                \"experienceModuleType\",\r",
							"                \"fieldDocument\",\r",
							"                \"points\",\r",
							"                \"progress\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"brandCategory\",\r",
							"        \"brandCategoryId\",\r",
							"        \"data\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"  \r",
							"  \r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"  count1=jsonData[i].data.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].data[j].nid).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].title).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldExperiencesImage).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							" });\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/experiences/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"experiences",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand Education",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2710c520-95a4-4758-be45-117e09707927",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							" \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"brandCategory\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandCategoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"nid\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"title\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDescription\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldEducationContent\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDocument\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldEducationImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"points\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"progress\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"nid\",\r",
							"                \"title\",\r",
							"                \"fieldDescription\",\r",
							"                \"fieldEducationContent\",\r",
							"                \"fieldDocument\",\r",
							"                \"fieldEducationImage\",\r",
							"                \"points\",\r",
							"                \"progress\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"brandCategory\",\r",
							"        \"brandCategoryId\",\r",
							"        \"data\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"  \r",
							"  \r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"  count1=jsonData[i].data.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].data[j].nid).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].title).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldEducationContent).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldDocument).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldEducationImage).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							" });\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/education/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"education",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand Leadership",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cfce6fb-6e0e-4fa2-9d15-79d6a7e7db83",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							" \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"brandCategory\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandCategoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"nid\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"title\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldBrandName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDescription\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldLeadershipImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"leadershipModuleType\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDocument\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"points\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"progress\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"nid\",\r",
							"                \"title\",\r",
							"                \"fieldBrandName\",\r",
							"                \"fieldDescription\",\r",
							"                \"fieldLeadershipImage\",\r",
							"                \"leadershipModuleType\",\r",
							"                \"fieldDocument\",\r",
							"                \"points\",\r",
							"                \"progress\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"brandCategory\",\r",
							"        \"brandCategoryId\",\r",
							"        \"data\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"  \r",
							"  \r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"  count1=jsonData[i].data.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].data[j].nid).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].title).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldBrandName).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldLeadershipImage).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							" });\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/leadership/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"leadership",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Evaluation Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a18cb440-fbbe-4430-aceb-77bfbef4c6d7",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"if(get_username == \"newmansd@mailinator.com\")",
							"{",
							"",
							"if(responseCode.code === 200)",
							"{",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"categoryName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryColor\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"brandName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"outerColor\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"categoryName\",",
							"        \"categoryColor\",",
							"        \"categoryImage\",",
							"        \"categoryId\",",
							"        \"brandName\",",
							"        \"outerColor\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							"//parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData[0].categoryName).to.not.eql(\"\");",
							"pm.expect(jsonData[0].categoryColor).to.not.eql(\"\");",
							"pm.expect(jsonData[0].categoryImage).to.not.eql(\"\");",
							"pm.expect(jsonData[0].categoryId).to.not.eql(\"\");",
							"pm.expect(jsonData[0].outerColor).to.not.eql(\"\");",
							"});",
							"",
							"",
							"//code to fetch categoryId and store it in an Environment Variable",
							"pm.environment.set(\"category_Id\",jsonData[0].categoryId);",
							"}",
							"}",
							"}",
							"",
							"",
							"",
							"else if (get_username == \"FEdnewman@mailinator.com\")",
							"{",
							"    if(responseCode.code === 200)",
							"{",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryColor\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"outerColor\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"vertical1\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            }",
							"          ]",
							"        },",
							"        \"vertical2\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            }",
							"          ]",
							"        },",
							"        \"vertical3\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            }",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandName\",",
							"        \"categoryId\",",
							"        \"categoryName\",",
							"        \"categoryImage\",",
							"        \"categoryColor\",",
							"        \"outerColor\",",
							"        \"vertical1\",",
							"        \"vertical2\",",
							"        \"vertical3\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							"//parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData[0].categoryName).to.not.eql(\"\");",
							"pm.expect(jsonData[0].categoryColor).to.not.eql(\"\");",
							"pm.expect(jsonData[0].categoryImage).to.not.eql(\"\");",
							"pm.expect(jsonData[0].categoryId).to.not.eql(\"\");",
							"pm.expect(jsonData[0].outerColor).to.not.eql(\"\");",
							"pm.expect(jsonData[0].vertical1).to.not.eql(\"\");",
							"pm.expect(jsonData[0].vertical2).to.not.eql(\"\");",
							"pm.expect(jsonData[0].vertical3).to.not.eql(\"\");",
							"});",
							"",
							"",
							"//code to fetch categoryId and store it in an Environment Variable",
							"pm.environment.set(\"category_Id\",jsonData[0].categoryId);",
							"}",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/assessment/categories/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"assessment",
						"categories",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Feedback for BA",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af713555-a3f2-48d6-9640-61aac8bcfae1",
						"exec": [
							"var get_username = pm.environment.get(\"username\")\r",
							"\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"if(get_username == \"newmansd@mailinator.com\")\r",
							"{\r",
							" //code to verify Blank Array In Response\r",
							" pm.test(\"Blank Array is there in Response as SD will not get feedback for BA\",function(){\r",
							" pm.expect(jsonData.length).to.eql(0);\r",
							" });\r",
							" }\r",
							"\r",
							"\r",
							"\r",
							"else if(responseCode.code === 200)\r",
							"{\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"  var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//code to verify key value pairs in Response\r",
							"pm.test(\"Verify Keys Value Pairs in API\",function(){\r",
							"pm.expect(jsonData[0]).to.eql(\"KNOWLEDGE: If you aren’t feeling uber-confident with the benefits of a product or how to demonstrate, collaborate with your Manager as to what specific branded resources you should review and by what date.  \");\r",
							"pm.expect(jsonData[1]).to.eql(\"KNOWLEDGE: Who gets what? If you’re struggling aligning the right product to the right concern. Practice makes perfect. Have your Manager and 1-2 of your colleagues share their biggest skincare concern. Put together a system of products for each one and get their agreement that what you’ve selected is correct. \");\r",
							"pm.expect(jsonData[2]).to.eql(\"TECHNIQUE: For the next 10 customers you see, commit to finding a way of offering the service of your expertise. Link to a skincare service, demonstrate products and offer samples if available.\");\r",
							"pm.expect(jsonData[3]).to.eql(\"TECHNIQUE: Not feeling confident about a certain skincare recommendation/service? Have your Manager demonstrate on you and then go practice on two friends/colleagues. \");\r",
							"pm.expect(jsonData[4]).to.eql(\"TECHNIQUE: Do you feel stuck when a customer asks a challenging question like is your product vegan or phthalate-free? Work with your Manager to practice responses that answer the questions and protect your brand’s integrity. \");\r",
							"pm.expect(jsonData[5]).to.eql(\"SALES: Increasing your IPT/AUS can be easier than it may seem. For the next 5 customers you see, recommend a product that compliments her initial concern (i.e. if she asks for a foundation suggest a cleanser to help her remove it). You can easily do this by always ask open-ended questions, be curious and actively listen.   \");\r",
							"pm.expect(jsonData[6]).to.eql(\"SALES: Do you sometimes find it hard to ask for the sale? Pick 2-3 roadblocks you’re afraid you’ll hear from a customer and role play how you can handle those with your Manager. \");\r",
							"pm.expect(jsonData[7]).to.eql(\"SALES: Customers who shop with you 2 or more times a year, spend an average of 3x as much money as customers who you only see once! What do you find hardest about clienteling? Do you hate cold calling? Start by calling with a partner, observe and find one thing that feels right for you to try. Put that into play immediately with 3 customers. Maybe you struggle asking for a customer’s information? Put yourself in your customer’s shoes…you’ve just bonded with this salesperson and shared some of your secrets, why wouldn’t you want her to keep the connection going?\");\r",
							"pm.expect(jsonData[8]).to.eql(\"SALES: Every day is a build and each day is important in achieving your long-term goals. If you missed a sales goal one day,what are you doing to ensure you stay on target to achieve the week, the month, the year? Work with your Manager to determine a realistic and achievable plan to stay on track.\");\r",
							"pm.expect(jsonData[9]).to.eql(\"SALES: You’re a pace setter who is never satisfied. How much higher can you reach? Push your limits – work with your Manager to establish a challenge to light your fire!\");\r",
							"\r",
							"});\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/feedback/{{brand_id}}?_format=json&category={{category_Id}}&role={{user_role_ba}}",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"feedback",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "category",
							"value": "{{category_Id}}"
						},
						{
							"key": "role",
							"value": "{{user_role_ba}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3380ba36-1923-4e0d-92a8-1c99a02adbd9",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"rank\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"stores\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"learners\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"rank\",",
							"    \"stores\",",
							"    \"learners\"",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.rank).to.not.eql(\"\");",
							"pm.expect(jsonData.stores).to.not.eql(\"\");",
							"pm.expect(jsonData.learners).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/brand_stats/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"brand_stats",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				},
				"description": "To get brand stats for given brand id like rank,learners and store of brand."
			},
			"response": []
		},
		{
			"name": "Get - Featured Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2c457a6-9b8a-4255-b858-48ce9da7038c",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"field_featured_content_desc\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"field_featured_content_document\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"field_featured_content_image\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"field_featured_content_file_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"field_featured_content_desc\",",
							"        \"field_featured_content_document\",",
							"        \"field_featured_content_image\",",
							"        \"field_featured_content_file_url\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].field_featured_content_image).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/featured/content?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"featured",
						"content"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Top Learners List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3320a10b-6e54-4690-9e53-80922811b529",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"\r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"var get_username = pm.environment.get(\"username\")\r",
							"\r",
							"if(get_username == \"FEdnewman@mailinator.com\")\r",
							"\r",
							"{\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"role\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"area\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"region\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rank\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"regionId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"memberId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"firstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfJoining\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfBirth\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"proficiencyScore\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorId\": {\r",
							"          \"type\": \"null\"\r",
							"        },\r",
							"        \"doorName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"snapshot\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgesPoints\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"createdOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"role\",\r",
							"        \"area\",\r",
							"        \"region\",\r",
							"        \"rank\",\r",
							"        \"regionId\",\r",
							"        \"memberId\",\r",
							"        \"userId\",\r",
							"        \"firstName\",\r",
							"        \"lastName\",\r",
							"        \"brandId\",\r",
							"        \"brandName\",\r",
							"        \"dateOfJoining\",\r",
							"        \"dateOfBirth\",\r",
							"        \"userImage\",\r",
							"        \"proficiencyScore\",\r",
							"        \"doorId\",\r",
							"        \"doorName\",\r",
							"        \"snapshot\",\r",
							"        \"updatedOn\",\r",
							"        \"badgesPoints\",\r",
							"        \"createdOn\",\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"}\r",
							"\r",
							"\r",
							"else if(get_username==\"newmansd@mailinator.com\")\r",
							"{\r",
							"    var schema={\r",
							"        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"role\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"area\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"region\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rank\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"regionId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"memberId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"firstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfJoining\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfBirth\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"proficiencyScore\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorId\": {\r",
							"          \"type\": \"null\"\r",
							"        },\r",
							"        \"doorName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"snapshot\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgesPoints\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"createdOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"territoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"role\",\r",
							"        \"area\",\r",
							"        \"region\",\r",
							"        \"rank\",\r",
							"        \"regionId\",\r",
							"        \"memberId\",\r",
							"        \"userId\",\r",
							"        \"firstName\",\r",
							"        \"lastName\",\r",
							"        \"brandId\",\r",
							"        \"brandName\",\r",
							"        \"dateOfJoining\",\r",
							"        \"dateOfBirth\",\r",
							"        \"userImage\",\r",
							"        \"proficiencyScore\",\r",
							"        \"doorId\",\r",
							"        \"doorName\",\r",
							"        \"snapshot\",\r",
							"        \"updatedOn\",\r",
							"        \"badgesPoints\",\r",
							"        \"createdOn\",\r",
							"        \"territoryId\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"}\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"\r",
							"\r",
							"//code to verify values of keys that cannot be set as null\r",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							"for(i=0;i<count;i++)\r",
							"{\r",
							"pm.expect(jsonData[i].role).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].rank).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].memberId).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].userId).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].firstName).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].lastName).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].proficiencyScore).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].snapshot).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].badgesPoints).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].createdOn).to.not.eql(\"\");\r",
							"}\r",
							"});\r",
							"}\r",
							"\r",
							"\r",
							"//code to get Learner Brand_id\r",
							"pm.environment.set(\"Learner_BrandId\",jsonData[0].brandId);\r",
							"\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{lm_url}}/api/v1/my-team-learners/{{user_id}}?_format=json",
					"host": [
						"{{lm_url}}"
					],
					"path": [
						"api",
						"v1",
						"my-team-learners",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "limit",
							"value": "10",
							"disabled": true
						},
						{
							"key": "page",
							"value": "1",
							"disabled": true
						},
						{
							"key": "search",
							"value": "firstname-60215 lastname-60215",
							"disabled": true
						},
						{
							"key": "brand_id",
							"value": "clinique",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Brand Top 3 Learners List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b184184c-ed96-4993-919b-1c7ffb07690a",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"if(get_username == \"FEMolly@srijan.net\")",
							"{",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"role\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"area\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"region\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"rank\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"regionId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"memberId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"userId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"firstName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"lastName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"brandId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"brandName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"dateOfJoining\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"dateOfBirth\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"userImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"proficiencyScore\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"doorId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"doorName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"snapshot\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"updatedOn\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgesPoints\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"createdOn\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"role\",",
							"        \"area\",",
							"        \"region\",",
							"        \"rank\",",
							"        \"regionId\",",
							"        \"memberId\",",
							"        \"userId\",",
							"        \"firstName\",",
							"        \"lastName\",",
							"        \"brandId\",",
							"        \"brandName\",",
							"        \"dateOfJoining\",",
							"        \"dateOfBirth\",",
							"        \"userImage\",",
							"        \"proficiencyScore\",",
							"        \"doorId\",",
							"        \"doorName\",",
							"        \"snapshot\",",
							"        \"updatedOn\",",
							"        \"badgesPoints\",",
							"        \"createdOn\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"}",
							"",
							"",
							"",
							"",
							"",
							"else if(get_username == \"FEdnewman@mailinator.com\")",
							"{",
							" var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"role\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"area\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"region\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"rank\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"regionId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"memberId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"userId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"firstName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"lastName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"brandId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"brandName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"dateOfJoining\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"dateOfBirth\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"userImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"proficiencyScore\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"doorId\": {",
							"          \"type\": \"null\"",
							"        },",
							"        \"doorName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"snapshot\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"updatedOn\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgesPoints\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"createdOn\": {",
							"          \"type\": \"string\"",
							"        },",
							"      },",
							"      \"required\": [",
							"        \"role\",",
							"        \"area\",",
							"        \"region\",",
							"        \"rank\",",
							"        \"regionId\",",
							"        \"memberId\",",
							"        \"userId\",",
							"        \"firstName\",",
							"        \"lastName\",",
							"        \"brandId\",",
							"        \"brandName\",",
							"        \"dateOfJoining\",",
							"        \"dateOfBirth\",",
							"        \"userImage\",",
							"        \"proficiencyScore\",",
							"        \"doorId\",",
							"        \"doorName\",",
							"        \"snapshot\",",
							"        \"updatedOn\",",
							"        \"badgesPoints\",",
							"        \"createdOn\",",
							"      ]",
							"    }",
							"  ]",
							"} ",
							"}   ",
							"    ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].role).to.not.eql(\"\");",
							"pm.expect(jsonData[i].rank).to.not.eql(\"\");",
							"pm.expect(jsonData[i].memberId).to.not.eql(\"\");",
							"pm.expect(jsonData[i].userId).to.not.eql(\"\");",
							"pm.expect(jsonData[i].firstName).to.not.eql(\"\");",
							"pm.expect(jsonData[i].lastName).to.not.eql(\"\");",
							"pm.expect(jsonData[i].proficiencyScore).to.not.eql(\"\");",
							"pm.expect(jsonData[i].snapshot).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgesPoints).to.not.eql(\"\");",
							"pm.expect(jsonData[i].createdOn).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/my-team-learners/{{user_id}}?_format=json&brand_id={{Learner_BrandId}}",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"my-team-learners",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "3",
							"disabled": true
						},
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "brand_id",
							"value": "{{Learner_BrandId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "My Team List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "66aab5b3-3946-4927-b7a1-c2761f13ffed",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							" \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"var get_username = pm.environment.get(\"username\")\r",
							"\r",
							"\r",
							"\r",
							"if(get_username == \"FEMolly@srijan.net\")\r",
							"{\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"role\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"area\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"region\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rank\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"regionId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"memberId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"firstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfJoining\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfBirth\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"proficiencyScore\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"snapshot\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgesPoints\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"createdOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badges\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"badgeId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeCount\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"totalPoint\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"badgeId\",\r",
							"                \"badgeName\",\r",
							"                \"badgeImage\",\r",
							"                \"badgeCount\",\r",
							"                \"totalPoint\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"role\",\r",
							"        \"area\",\r",
							"        \"region\",\r",
							"        \"rank\",\r",
							"        \"regionId\",\r",
							"        \"memberId\",\r",
							"        \"userId\",\r",
							"        \"firstName\",\r",
							"        \"lastName\",\r",
							"        \"brandId\",\r",
							"        \"brandName\",\r",
							"        \"dateOfJoining\",\r",
							"        \"dateOfBirth\",\r",
							"        \"userImage\",\r",
							"        \"proficiencyScore\",\r",
							"        \"doorId\",\r",
							"        \"doorName\",\r",
							"        \"snapshot\",\r",
							"        \"updatedOn\",\r",
							"        \"badgesPoints\",\r",
							"        \"createdOn\",\r",
							"        \"badges\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else if(get_username == \"FEdnewman@mailinator.com\")\r",
							"{\r",
							" var schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"role\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"area\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"region\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rank\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"regionId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"memberId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"firstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfJoining\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfBirth\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"proficiencyScore\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorId\": {\r",
							"          \"type\": \"null\"\r",
							"        },\r",
							"        \"doorName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"snapshot\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgesPoints\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"createdOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badges\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"badgeId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"memberId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeCount\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeTitle\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeImageAlt\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeImageUrl\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"badgeId\",\r",
							"                \"userId\",\r",
							"                \"memberId\",\r",
							"                \"badgeCount\",\r",
							"                \"badgeTitle\",\r",
							"                \"badgeImageAlt\",\r",
							"                \"badgeImageUrl\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"role\",\r",
							"        \"area\",\r",
							"        \"region\",\r",
							"        \"rank\",\r",
							"        \"regionId\",\r",
							"        \"memberId\",\r",
							"        \"userId\",\r",
							"        \"firstName\",\r",
							"        \"lastName\",\r",
							"        \"brandId\",\r",
							"        \"brandName\",\r",
							"        \"dateOfJoining\",\r",
							"        \"dateOfBirth\",\r",
							"        \"userImage\",\r",
							"        \"proficiencyScore\",\r",
							"        \"doorId\",\r",
							"        \"doorName\",\r",
							"        \"snapshot\",\r",
							"        \"updatedOn\",\r",
							"        \"badgesPoints\",\r",
							"        \"createdOn\",\r",
							"        \"badges\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"} \r",
							"}\r",
							" \r",
							" \r",
							" \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"\r",
							"\r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"   if(jsonData[i].badges==null)\r",
							"   {\r",
							"       break;\r",
							"   }\r",
							"   else\r",
							"  {\r",
							"  count1=jsonData[i].badges.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].badges[j].badgeId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].userId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].memberId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeCount).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeTitle).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeImageAlt).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeImageUr).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							"  }\r",
							" });\r",
							" \r",
							" \r",
							" //code to get memberId for First Result\r",
							" pm.environment.set(\"member_id\",jsonData[0].memberId);\r",
							" }\r",
							"}\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/my-team-learners/{{user_id}}?_format=json&brand_id={{Learner_BrandId}}&badges=true",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"my-team-learners",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "brand_id",
							"value": "{{Learner_BrandId}}"
						},
						{
							"key": "badges",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Team Search by Name SD",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "486c2bd5-e1cd-4be6-97cb-7536835469e1",
						"exec": [
							"var get_username = pm.environment.get(\"username\")\r",
							"\r",
							"\r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"if(get_username == \"FEMolly@srijan.net\")\r",
							"// {\r",
							"// //  //code to verify Blank Array In Response\r",
							"// //  pm.test(\"Blank Array is there in Response as we are logged In through FE\",function(){\r",
							"// //  pm.expect(jsonData.length).to.eql(0);\r",
							"// //  });\r",
							"// //  }\r",
							"\r",
							"\r",
							"\r",
							"if(responseCode.code === 200)\r",
							"{\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"role\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"area\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"region\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rank\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"regionId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"memberId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"firstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfJoining\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfBirth\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"proficiencyScore\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"snapshot\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgesPoints\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"createdOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badges\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"badgeId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeCount\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"totalPoint\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"badgeId\",\r",
							"                \"badgeName\",\r",
							"                \"badgeImage\",\r",
							"                \"badgeCount\",\r",
							"                \"totalPoint\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"role\",\r",
							"        \"area\",\r",
							"        \"region\",\r",
							"        \"rank\",\r",
							"        \"regionId\",\r",
							"        \"memberId\",\r",
							"        \"userId\",\r",
							"        \"firstName\",\r",
							"        \"lastName\",\r",
							"        \"brandId\",\r",
							"        \"brandName\",\r",
							"        \"dateOfJoining\",\r",
							"        \"dateOfBirth\",\r",
							"        \"userImage\",\r",
							"        \"proficiencyScore\",\r",
							"        \"doorId\",\r",
							"        \"doorName\",\r",
							"        \"snapshot\",\r",
							"        \"updatedOn\",\r",
							"        \"badgesPoints\",\r",
							"        \"createdOn\",\r",
							"        \"badges\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"\r",
							"\r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"   if(jsonData[i].badges==null)\r",
							"   {\r",
							"       break;\r",
							"   }\r",
							"   else\r",
							"  {\r",
							"  count1=jsonData[i].badges.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].badges[j].badgeId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].userId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].memberId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeCount).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeTitle).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeImageAlt).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeImageUr).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							"  }\r",
							" });\r",
							"}\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/my-team-learners/{{user_id}}?_format=json&badges=true&brand_id={{Learner_BrandId}}&search=firstname",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"my-team-learners",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "badges",
							"value": "true"
						},
						{
							"key": "brand_id",
							"value": "{{Learner_BrandId}}"
						},
						{
							"key": "search",
							"value": "firstname"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Team Search by Name FE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "257025e1-1320-4685-b796-3d33d7196d70",
						"exec": [
							"var get_username = pm.environment.get(\"username\")\r",
							"\r",
							"\r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"if(get_username == \"FEMolly@srijan.net\")\r",
							"// {\r",
							"//  //code to verify Blank Array In Response\r",
							"//  pm.test(\"Blank Array is there in Response as we are logged In through SD\",function(){\r",
							"//  pm.expect(jsonData.length).to.eql(0);\r",
							"//  });\r",
							"//  }\r",
							"\r",
							"\r",
							"\r",
							"if(responseCode.code === 200)\r",
							"{\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"role\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"area\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"region\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rank\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"regionId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"memberId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"firstName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfJoining\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"dateOfBirth\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"userImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"proficiencyScore\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"doorName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"snapshot\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"updatedOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgesPoints\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"createdOn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badges\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"badgeId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeCount\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"totalPoint\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"badgeId\",\r",
							"                \"badgeName\",\r",
							"                \"badgeImage\",\r",
							"                \"badgeCount\",\r",
							"                \"totalPoint\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"role\",\r",
							"        \"area\",\r",
							"        \"region\",\r",
							"        \"rank\",\r",
							"        \"regionId\",\r",
							"        \"memberId\",\r",
							"        \"userId\",\r",
							"        \"firstName\",\r",
							"        \"lastName\",\r",
							"        \"brandId\",\r",
							"        \"brandName\",\r",
							"        \"dateOfJoining\",\r",
							"        \"dateOfBirth\",\r",
							"        \"userImage\",\r",
							"        \"proficiencyScore\",\r",
							"        \"doorId\",\r",
							"        \"doorName\",\r",
							"        \"snapshot\",\r",
							"        \"updatedOn\",\r",
							"        \"badgesPoints\",\r",
							"        \"createdOn\",\r",
							"        \"badges\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"      \r",
							"\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"\r",
							"\r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"   if(jsonData[i].badges==null)\r",
							"   {\r",
							"       break;\r",
							"   }\r",
							"   else\r",
							"  {\r",
							"  count1=jsonData[i].badges.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].badges[j].badgeId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].userId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].memberId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeCount).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeTitle).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeImageAlt).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].badges[j].badgeImageUr).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							"  }\r",
							" });\r",
							"}\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/my-team-learners/{{user_id}}?_format=json&badges=true&brand_id={{Learner_BrandId}}&search={{search_BA_name}}",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"my-team-learners",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "badges",
							"value": "true"
						},
						{
							"key": "brand_id",
							"value": "{{Learner_BrandId}}"
						},
						{
							"key": "search",
							"value": "{{search_BA_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Badges List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0bf9dd8-bb5a-4566-9355-dbdac4376685",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							" \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"badgeCategory\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgeCategoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"categoryWeight\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"badgeId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgePoint\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"badgeDescription\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"badgeId\",\r",
							"                \"badgeName\",\r",
							"                \"badgeImage\",\r",
							"                \"badgePoint\",\r",
							"                \"badgeDescription\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"badgeCategory\",\r",
							"        \"badgeCategoryId\",\r",
							"        \"categoryWeight\",\r",
							"        \"data\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"  \r",
							"  \r",
							"  //code to verify keys that cannot be set as null\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"  count1=jsonData[i].data.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].data[j].badgeId).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].badgeName).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].badgeImage).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].badgePoint).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].badgeDescription).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							" });\r",
							" \r",
							"\r",
							" \r",
							" //code to fetch first badgeId and store it in an Environment Variable \r",
							"pm.environment.set(\"badge_id\",jsonData[0].data[0].badgeId);\r",
							" }\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/badges?_format=json&role={{user_role_ba}}",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"badges"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "role",
							"value": "{{user_role_ba}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7bae1715-ccc7-4eb2-9b63-479f35e4e012",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"if(get_username == \"FEdnewman@mailinator.com\")",
							"{",
							"    ",
							"  pm.test(\"Status code is 400 as FE is logged In and user role is of SD\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"message\": \"User Id is inconsistent with the role provided in the parameter\"",
							"});",
							"});",
							"}",
							"",
							"",
							"",
							"if(responseCode.code === 200)",
							"{",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"learners\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"totalBa\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"latestUser\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"totalBa\",",
							"        \"latestUser\"",
							"      ]",
							"    },",
							"    \"badges\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"averageCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"totalBadgeCount\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"averageCount\",",
							"        \"totalBadgeCount\"",
							"      ]",
							"    },",
							"    \"talentbankLink\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"snapshot\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"snapshotTotal\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"snapshotAverage\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"snapshotTotal\",",
							"        \"snapshotAverage\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"learners\",",
							"    \"badges\",",
							"    \"talentbankLink\",",
							"    \"snapshot\"",
							"  ]",
							"}",
							"",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.learners.averageCount).not.to.eql(\"\");",
							"pm.expect(jsonData.learners.totalUser).to.not.eql(\"\");",
							"pm.expect(jsonData.badges.averageCount).to.not.eql(\"\");",
							"pm.expect(jsonData.badges.totalBadgeCount).to.not.eql(\"\");",
							"pm.expect(jsonData.talentbankLink).to.not.eql(\"\");",
							"pm.expect(jsonData.snapshot.snapshotTotal).to.not.eql(\"\");",
							"pm.expect(jsonData.snapshot.snapshotAverage).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/dashboard/my-team-scorecard/{{user_id}}?_format=json&role={{user_role_set_fe}}&new_learners=1",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dashboard",
						"my-team-scorecard",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "role",
							"value": "{{user_role_set_fe}}"
						},
						{
							"key": "new_learners",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Dashboard FE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cda905a1-ec3b-4e0a-a23e-b2ca7ccd6bfa",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"if(get_username == \"newmansd@mailinator.com\")",
							"{",
							"    ",
							"  pm.test(\"Status code is 400 as SD is logged In and user role is of FE\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"message\": \"User Id is inconsistent with the role provided in the parameter\"",
							"});",
							"});",
							"}",
							"",
							"",
							"if(responseCode.code === 200)",
							"{",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"learners\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"totalBa\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"latestUser\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"totalBa\",",
							"        \"latestUser\"",
							"      ]",
							"    },",
							"    \"badges\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"averageCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"totalBadgeCount\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"averageCount\",",
							"        \"totalBadgeCount\"",
							"      ]",
							"    },",
							"    \"talentbankLink\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"snapshot\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"snapshotTotal\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"snapshotAverage\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"snapshotTotal\",",
							"        \"snapshotAverage\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"learners\",",
							"    \"badges\",",
							"    \"talentbankLink\",",
							"    \"snapshot\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.learners.totalBa).not.to.eql(\"\");",
							"pm.expect(jsonData.learners.latestUser).to.not.eql(\"\");",
							"pm.expect(jsonData.badges.averageCount).to.not.eql(\"\");",
							"pm.expect(jsonData.badges.totalBadgeCount).to.not.eql(\"\");",
							"pm.expect(jsonData.talentbankLink).to.not.eql(\"\");",
							"pm.expect(jsonData.snapshot.snapshotTotal).to.not.eql(\"\");",
							"pm.expect(jsonData.snapshot.snapshotAverage).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/dashboard/my-team-scorecard/{{user_id}}?_format=json&role={{user_role_set_fe}}&new_learners=1",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dashboard",
						"my-team-scorecard",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "role",
							"value": "{{user_role_set_fe}}"
						},
						{
							"key": "new_learners",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Assign Bades API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "151198d3-80a1-48b2-8aab-d75d2e6070b3",
						"exec": [
							"if(responseCode.code === 201)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"   \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"totalCount\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"badgesPoints\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"badges\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"badgeId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgeName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgeImage\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgeCount\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"totalPoint\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"badgeId\",",
							"            \"badgeName\",",
							"            \"badgeImage\",",
							"            \"badgeCount\",",
							"            \"totalPoint\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"message\",",
							"    \"totalCount\",",
							"    \"badgesPoints\",",
							"    \"badges\"",
							"  ]",
							"}",
							"",
							"",
							"//parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.message).not.to.eql(\"\");",
							"});",
							"",
							"",
							"//code to verify static key values in Response",
							"pm.test(\"Code to Verify Static key values in Response\",function(){",
							"pm.expect(jsonData.message).to.eql(\"badgeAwardText\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"badges\": \n [\n     {\n         \"badge_id\": \"{{badge_id}}\",\n         \"badge_count\": \"1\"\n     }\n ],\n \n \"recipient\": \"kanika.arora@srijan.net\",\n \"text\": \"Test French\"\n \n}\n\n"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/badges/save/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"badges",
						"save",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Assign Badge list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "13b76ad8-1f7d-4894-b7f7-fb9619eefb89",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"count\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"sum\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"data\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"badgeId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgeName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgeImage\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgeCount\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"sum\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"badgeId\",",
							"            \"badgeName\",",
							"            \"badgeImage\",",
							"            \"badgeCount\",",
							"            \"sum\"",
							"          ]",
							"        }",
							"      ]",
							"    },",
							"    \"blackout\": {",
							"      \"type\": \"boolean\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"count\",",
							"    \"sum\",",
							"    \"data\",",
							"    \"blackout\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.count).to.not.eql(\"\");",
							"pm.expect(jsonData.sum).to.not.eql(\"\");",
							"pm.expect(jsonData.blackout).to.not.eql(\"\");",
							"});",
							"",
							"",
							"//code to fetch the count of badges in badges List",
							" pm.test('Count of badges in badges List = '+jsonData.data.length, function () {",
							"    count = jsonData.data.length;",
							"    });",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null in data array",
							"pm.test(\"Value of the keys that cannot be set as null in data array\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData.data[i].badgeId).to.not.eql(\"\");",
							"pm.expect(jsonData.data[i].badgeName).to.not.eql(\"\");",
							"pm.expect(jsonData.data[i].badgeImage).to.not.eql(\"\");",
							"}",
							"});  ",
							"",
							"",
							"",
							"//code to verify value of first BadgeId is equal to BadgeId in Environment Variable",
							"var badge_id_get = pm.environment.get(\"badge_id\");",
							"pm.expect(jsonData.data[0].badgeId).to.eql(badge_id_get);",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/badges/user/210492?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"badges",
						"user",
						"210492"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Earned Badge list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bc80309b-2e5a-476b-b024-673f1acc6a45",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"count\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"sum\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"data\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"q2\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"count\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"sum\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"label\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"result\": {",
							"              \"type\": \"array\",",
							"              \"items\": {}",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"count\",",
							"            \"sum\",",
							"            \"label\",",
							"            \"result\"",
							"          ]",
							"        },",
							"        \"q1\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"count\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"sum\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"label\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"result\": {",
							"              \"type\": \"array\",",
							"              \"items\": {}",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"count\",",
							"            \"sum\",",
							"            \"label\",",
							"            \"result\"",
							"          ]",
							"        },",
							"        \"q3\": {",
							"          \"type\": \"null\"",
							"        },",
							"        \"q4\": {",
							"          \"type\": \"null\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"q2\",",
							"        \"q1\",",
							"        \"q3\",",
							"        \"q4\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"count\",",
							"    \"sum\",",
							"    \"data\"",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Data",
							" pm.test('Count of Objects in array of Data = '+jsonData.data.length, function () {",
							"    count = jsonData.data.length;",
							"    });",
							"  ",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.count).to.not.eql(\"\");",
							"pm.expect(jsonData.sum).to.not.eql(\"\");",
							"});",
							"",
							"",
							"",
							"  //code to verify keys that cannot be set as null",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  ",
							"  for(i=0;i<count;i++)",
							"  {",
							"  count1=jsonData.data[i].data.length;",
							"  console.log(count1);",
							"  for(j=0; j<count1; j++)",
							"  {",
							"  pm.expect(jsonData.data[i].data[j].badgeId).to.not.eql(\"\");",
							"  pm.expect(jsonData.data[i].data[j].badgeName).to.not.eql(\"\");",
							"  pm.expect(jsonData.data[i].data[j].badgeImage).to.not.eql(\"\");",
							"  pm.expect(jsonData.data[i].data[j].badgeCount).to.not.eql(\"\");",
							"  pm.expect(jsonData.data[i].data[j].sum).to.not.eql(\"\");",
							"  }",
							"  }",
							" });",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/user/earned/badges/210492?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"earned",
						"badges",
						"210492"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Assigned Badge category wise",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b266a416-180a-48d7-9cf0-ac6ae8181698",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"   \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgeCategoryId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgeCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"data\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"object\",",
							"              \"properties\": {",
							"                \"badgeId\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"badgeName\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"badgeImage\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"badgePoint\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"badgeDescription\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"totalBadges\": {",
							"                  \"type\": \"string\"",
							"                }",
							"              },",
							"              \"required\": [",
							"                \"badgeId\",",
							"                \"badgeName\",",
							"                \"badgeImage\",",
							"                \"badgePoint\",",
							"                \"badgeDescription\",",
							"                \"totalBadges\"",
							"              ]",
							"            }",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeCategory\",",
							"        \"badgeCategoryId\",",
							"        \"badgeCount\",",
							"        \"data\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"  ",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].badgeCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgeCategoryId).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgeCount).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"",
							"  //code to verify keys that cannot be set as null in Data Array",
							"  pm.test(\"Value of the keys that cannot be set as null in Data Array\",function(){  ",
							"  for(i=0;i<count;i++)",
							"  {",
							"  count1=jsonData[i].data.length;",
							"  console.log(count1);",
							"  for(j=0; j<count1; j++)",
							"  {",
							"  pm.expect(jsonData[i].data[j].badgeId).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].data[j].badgeName).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].data[j].badgeImage).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].data[j].badgePoint).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].data[j].badgeDescription).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].data[j].totalBadges).to.not.eql(\"\");",
							"  }",
							"  }",
							" });",
							" }",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/dashboard/badges/allot/{{user_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dashboard",
						"badges",
						"allot",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Dashboard Badge",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d8bb73b-2550-4e18-ac02-4ec65d1419b1",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"    \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"badgeCategory\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgeCategoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgeCount\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"images\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"status\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"badgeCategory\",\r",
							"        \"badgeCategoryId\",\r",
							"        \"badgeCount\",\r",
							"        \"images\",\r",
							"        \"status\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"  var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"    \r",
							"    \r",
							"    \r",
							"//code to verify values of keys that cannot be set as null\r",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							" for(i=0;i<count;i++)\r",
							" {\r",
							" pm.expect(jsonData[i].badgeCategory).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].badgeCategoryId).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].badgeCount).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].images).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].status).to.not.eql(\"\");\r",
							" }\r",
							" });\r",
							" }\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/dashboard/badges?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dashboard",
						"badges"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - User Permission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7ccd51a-1eb6-45de-b766-cebae91c26b8",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"   \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"promote\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"field_executive\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"beauty_advisor\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"sales_director\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"fetm\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"store_manager\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"brand_management\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"central_team\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"power_user\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"manager\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"field_executive\",",
							"        \"beauty_advisor\",",
							"        \"sales_director\",",
							"        \"fetm\",",
							"        \"store_manager\",",
							"        \"brand_management\",",
							"        \"central_team\",",
							"        \"power_user\",",
							"        \"manager\"",
							"      ]",
							"    },",
							"    \"badges\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"field_executive\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"beauty_advisor\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"sales_director\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"fetm\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"store_manager\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"brand_management\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"central_team\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"power_user\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"manager\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"field_executive\",",
							"        \"beauty_advisor\",",
							"        \"sales_director\",",
							"        \"fetm\",",
							"        \"store_manager\",",
							"        \"brand_management\",",
							"        \"central_team\",",
							"        \"power_user\",",
							"        \"manager\"",
							"      ]",
							"    },",
							"    \"evaluation\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"field_executive\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"beauty_advisor\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"sales_director\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"fetm\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"store_manager\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"brand_management\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"central_team\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"power_user\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        },",
							"        \"manager\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"field_executive\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"beauty_advisor\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"manager\": {",
							"              \"type\": \"integer\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"field_executive\",",
							"            \"beauty_advisor\",",
							"            \"manager\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"field_executive\",",
							"        \"beauty_advisor\",",
							"        \"sales_director\",",
							"        \"fetm\",",
							"        \"store_manager\",",
							"        \"brand_management\",",
							"        \"central_team\",",
							"        \"power_user\",",
							"        \"manager\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"promote\",",
							"    \"badges\",",
							"    \"evaluation\"",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify key value pairs in Promote",
							"pm.test(\"Code to verify key value pairs in Promote\",function(){",
							"pm.expect(jsonData.promote.field_executive.field_executive).to.eql(0);",
							"pm.expect(jsonData.promote.field_executive.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.promote.beauty_advisor.field_executive).to.eql(0);",
							"pm.expect(jsonData.promote.beauty_advisor.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.promote.sales_director.field_executive).to.eql(1);",
							"pm.expect(jsonData.promote.sales_director.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.promote.fetm.field_executive).to.eql(0);",
							"pm.expect(jsonData.promote.fetm.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.promote.store_manager.field_executive).to.eql(0);",
							"pm.expect(jsonData.promote.store_manager.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.promote.brand_management.field_executive).to.eql(0);",
							"pm.expect(jsonData.promote.brand_management.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.promote.central_team.field_executive).to.eql(0);",
							"pm.expect(jsonData.promote.central_team.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.promote.power_user.field_executive).to.eql(0);",
							"pm.expect(jsonData.promote.power_user.beauty_advisor).to.eql(0);",
							"});",
							"",
							"",
							"",
							"//code to verify key value pairs in Badges",
							"pm.test(\"Code to verify key value pairs in Badges\",function(){",
							"pm.expect(jsonData.badges.field_executive.field_executive).to.eql(0);",
							"pm.expect(jsonData.badges.field_executive.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.badges.beauty_advisor.field_executive).to.eql(0);",
							"pm.expect(jsonData.badges.beauty_advisor.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.badges.sales_director.field_executive).to.eql(1);",
							"pm.expect(jsonData.badges.sales_director.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.badges.fetm.field_executive).to.eql(1);",
							"pm.expect(jsonData.badges.fetm.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.badges.store_manager.field_executive).to.eql(0);",
							"pm.expect(jsonData.badges.store_manager.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.badges.brand_management.field_executive).to.eql(1);",
							"pm.expect(jsonData.badges.brand_management.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.badges.central_team.field_executive).to.eql(0);",
							"pm.expect(jsonData.badges.central_team.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.badges.power_user.field_executive).to.eql(1);",
							"pm.expect(jsonData.badges.power_user.beauty_advisor).to.eql(0);",
							"});",
							"",
							"",
							"//code to verify key value pairs in evaluation",
							"pm.test(\"Code to verify key value pairs in Evaluation\",function(){",
							"pm.expect(jsonData.evaluation.field_executive.field_executive).to.eql(0);",
							"pm.expect(jsonData.evaluation.field_executive.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.evaluation.beauty_advisor.field_executive).to.eql(0);",
							"pm.expect(jsonData.evaluation.beauty_advisor.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.evaluation.sales_director.field_executive).to.eql(1);",
							"pm.expect(jsonData.evaluation.sales_director.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.evaluation.fetm.field_executive).to.eql(1);",
							"pm.expect(jsonData.evaluation.fetm.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.evaluation.store_manager.field_executive).to.eql(0);",
							"pm.expect(jsonData.evaluation.store_manager.beauty_advisor).to.eql(1);",
							"pm.expect(jsonData.evaluation.brand_management.field_executive).to.eql(0);",
							"pm.expect(jsonData.evaluation.brand_management.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.evaluation.central_team.field_executive).to.eql(0);",
							"pm.expect(jsonData.evaluation.central_team.beauty_advisor).to.eql(0);",
							"pm.expect(jsonData.evaluation.power_user.field_executive).to.eql(0);",
							"pm.expect(jsonData.evaluation.power_user.beauty_advisor).to.eql(0);",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/rolePermissions?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"rolePermissions"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Completed Modules",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e69b813d-5366-4d59-8056-8c63c81a056a",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"",
							"if(get_username == \"newmansd@mailinator.com\")",
							"{",
							"  pm.test(\"Status code is 403 as SD cannot access this API\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"}",
							"",
							"",
							"",
							"",
							"else if(responseCode.code==200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"totalCount\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"completedCount\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"data\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"moduleTitle\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"moduleType\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"contentType\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"moduleLevel\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"moduleImage\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"points\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"moduleDescription\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"section\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"nid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"levelId\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"moduleTitle\",",
							"            \"moduleType\",",
							"            \"contentType\",",
							"            \"moduleLevel\",",
							"            \"moduleImage\",",
							"            \"points\",",
							"            \"moduleDescription\",",
							"            \"section\",",
							"            \"nid\",",
							"            \"levelId\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"totalCount\",",
							"    \"completedCount\",",
							"    \"data\"",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.totalCount).to.not.eql(\"\");",
							"pm.expect(jsonData.completedCount).to.not.eql(\"\");",
							"});",
							"",
							"",
							"//below code is to count the number of Objects in Data Array",
							" pm.test('Count of Objects in Result = '+jsonData.data.length, function () {",
							"    count = jsonData.data.length;",
							"    });",
							"",
							"",
							"",
							"",
							"  //code to verify keys that cannot be set as null in data Array",
							"  pm.test(\"Value of the keys that cannot be set as null in Data Array\",function(){  ",
							"  for(i=0;i<count;i++)",
							"  {",
							"  pm.expect(jsonData.data[i].moduleTitle).to.not.eql(\"\");",
							"  pm.expect(jsonData.data[i].moduleType).to.not.eql(\"\");",
							"  pm.expect(jsonData.data[i].moduleLevel).to.not.eql(\"\");",
							"  pm.expect(jsonData.data[i].moduleImage).to.not.eql(\"\");",
							"  }",
							" });",
							" }",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/dashboard/completed-module?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dashboard",
						"completed-module"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Recommend Modules",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f1662ef0-fadc-41f8-803d-bd6a5a754c1e",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"\r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"message\"\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//code to verify values of keys that cannot be set as null\r",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							"pm.expect(jsonData.message).to.not.eql(\"\");\r",
							"});\r",
							"\r",
							"//code to verify some of the Static Keys in Response\r",
							"pm.expect(jsonData.message).includes(\"Data successfully saved for users under user ID\");\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\r    {\r        \"memberId\": \"{{member_id}}\",\r        \"data\": [\r            {\r                \"levelId\": \"{{Infocus_Level}}\",\r                \"moduleId\": \"{{Infocus_Module}}\"\r            }\r             \r        ]\r    }\r]\r"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/recommended/save?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"recommended",
						"save"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Recommend Modules List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c83a005-e6a9-4431-8ad5-071028355814",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"category\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"module\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"object\",",
							"              \"properties\": {",
							"                \"nid\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"title\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"moduleDuration\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"moduleDescription\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"moduleImage\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"moduleType\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"moduleCategory\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"moduleFile\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"moduleProgress\": {",
							"                  \"type\": \"string\"",
							"                }",
							"              },",
							"              \"required\": [",
							"                \"nid\",",
							"                \"title\",",
							"                \"moduleDuration\",",
							"                \"moduleDescription\",",
							"                \"moduleImage\",",
							"                \"moduleType\",",
							"                \"moduleCategory\",",
							"                \"moduleFile\",",
							"                \"moduleProgress\"",
							"              ]",
							"            }",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"nid\",",
							"        \"title\",",
							"        \"levelImage\",",
							"        \"levelDescription\",",
							"        \"category\",",
							"        \"module\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"  ",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"",
							"  //code to verify keys that cannot be set as null in Module Array",
							"  pm.test(\"Value of the keys that cannot be set as null in Module Array\",function(){  ",
							"  for(i=0;i<count;i++)",
							"  {",
							"  count1=jsonData[i].module.length;",
							"  console.log(count1);",
							"  for(j=0; j<count1; j++)",
							"  {",
							"  pm.expect(jsonData[i].module[j].title).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].module[j].moduleImage).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].module[j].moduleCategory).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].module[j].nid).to.not.eql(\"\");",
							"  pm.expect(jsonData[i].module[j].field_groups_1).to.not.eql(\"\");",
							"  }",
							"  }",
							" });",
							" }",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/recommended/list?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"recommended",
						"list"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "X-TRACE-USER",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - FE Recommend Modules",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "06c0f7ad-0dba-482d-8a48-4b5a2239f029",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"\r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"moduleTitle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"moduleLevel\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"moduleImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"levelId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"moduleId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"points\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"moduleStatus\": {\r",
							"          \"type\": \"null\"\r",
							"        },\r",
							"        \"moduleFileType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"moduleDuration\": {\r",
							"          \"type\": \"null\"\r",
							"        },\r",
							"        \"moduleDescription\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"moduleLink\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"contentType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"section\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"moduleTitle\",\r",
							"        \"moduleLevel\",\r",
							"        \"moduleImage\",\r",
							"        \"levelId\",\r",
							"        \"moduleId\",\r",
							"        \"points\",\r",
							"        \"moduleStatus\",\r",
							"        \"moduleFileType\",\r",
							"        \"moduleDuration\",\r",
							"        \"moduleDescription\",\r",
							"        \"moduleLink\",\r",
							"        \"contentType\",\r",
							"        \"section\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"         \r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in Result\r",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"  \r",
							"\r",
							"\r",
							"//code to verify values of keys that cannot be set as null\r",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							"for(i=0;i<count;i++)\r",
							"{\r",
							"pm.expect(jsonData[i].moduleTitle).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].moduleLevel).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].moduleImage).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].levelId).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].moduleId).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].moduleStatus).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].moduleFileType).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].moduleDuration).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].moduleLink).to.not.eql(\"\");\r",
							"pm.expect(jsonData[i].contentType).to.not.eql(\"\");\r",
							"}\r",
							"});\r",
							"}\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/dashboard/recommended-module/{{user_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dashboard",
						"recommended-module",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET-Badges Archive",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef5ce027-56f0-417d-a914-469614c62e39",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgeName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgeImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgeCount\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"pointValue\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"year\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeId\",",
							"        \"badgeName\",",
							"        \"badgeImage\",",
							"        \"badgeCount\",",
							"        \"pointValue\",",
							"        \"year\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].badgeId).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgeName).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgeImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgeCount).to.not.eql(\"\");",
							"pm.expect(jsonData[i].pointValue).to.not.eql(\"\");",
							"pm.expect(jsonData[i].year).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/badges/archive/{{user_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"badges",
						"archive",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET-Learner Skill Distribution",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "adf366d2-cdd2-441a-8091-a6f8a2c868e6",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"profRange\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"learnerCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"learnerPercent\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"profRange\",",
							"        \"learnerCount\",",
							"        \"learnerPercent\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"profRange\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"learnerCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"learnerPercent\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"profRange\",",
							"        \"learnerCount\",",
							"        \"learnerPercent\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"profRange\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"learnerCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"learnerPercent\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"profRange\",",
							"        \"learnerCount\",",
							"        \"learnerPercent\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"profRange\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"learnerCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"learnerPercent\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"profRange\",",
							"        \"learnerCount\",",
							"        \"learnerPercent\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].profRange).to.not.eql(\"\");",
							"pm.expect(jsonData[i].learnerCount).to.not.eql(\"\");",
							"pm.expect(jsonData[i].learnerPercent).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/dashboard/learners/skill?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dashboard",
						"learners",
						"skill"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET-Learner Brand Distribution",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e68e049f-9e60-43aa-9c5c-f41405d371be",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"count\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"percentage\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"brandColor\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"name\",",
							"        \"count\",",
							"        \"percentage\",",
							"        \"brandColor\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].name).to.not.eql(\"\");",
							"pm.expect(jsonData[i].count).to.not.eql(\"\");",
							"pm.expect(jsonData[i].percentage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].brandColor).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/dashboard/learners/distribution?type=learners&_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"dashboard",
						"learners",
						"distribution"
					],
					"query": [
						{
							"key": "type",
							"value": "learners"
						},
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": null,
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - ELC Resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "492efeae-84b6-4ede-9098-f83363c38e03",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"    \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"brandCategory\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"brandCategoryId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"nid\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"title\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDescription\": {\r",
							"                  \"type\": \"null\"\r",
							"                },\r",
							"                \"resourceModuleType\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldDocument\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"fieldFeaturedProductImage\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"nid\",\r",
							"                \"title\",\r",
							"                \"fieldDescription\",\r",
							"                \"resourceModuleType\",\r",
							"                \"fieldDocument\",\r",
							"                \"fieldFeaturedProductImage\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"brandCategory\",\r",
							"        \"brandCategoryId\",\r",
							"        \"data\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"  var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"    \r",
							"    \r",
							"    \r",
							"//code to verify values of keys that cannot be set as null\r",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							" for(i=0;i<count;i++)\r",
							" {\r",
							" pm.expect(jsonData[i].brandCategory).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].brandCategoryId).to.not.eql(\"\");\r",
							" }\r",
							" });\r",
							" \r",
							" \r",
							"  //code to verify keys that cannot be set as null in Data Array\r",
							"  pm.test(\"Value of the keys that cannot be set as null in Data Array\",function(){  \r",
							"  for(i=0;i<count;i++)\r",
							"  {\r",
							"  count1=jsonData[i].data.length;\r",
							"  console.log(count1);\r",
							"  for(j=0; j<count1; j++)\r",
							"  {\r",
							"  pm.expect(jsonData[i].data[j].nid).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].title).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldDescription).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].resourceModuleType).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldDocument).to.not.eql(\"\");\r",
							"  pm.expect(jsonData[i].data[j].fieldFeaturedProductImage).to.not.eql(\"\");\r",
							"  }\r",
							"  }\r",
							" });\r",
							" }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/resources/{{elc_brandid}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"resources",
						"{{elc_brandid}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Learner Evaluation Rank API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4615a51-4624-4fad-ba4d-0eb7d74c8631",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"if(get_username == \"FEdnewman@mailinator.com\")",
							"{",
							" pm.test(\"Status code is 400 as this is for SD\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"message\": \"The ID values cannot be empty.\"",
							"});",
							"});",
							"}",
							"",
							"",
							"",
							"if(responseCode.code === 201)",
							"{",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"evaluation_history_id\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"message\",",
							"    \"evaluation_history_id\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.message).to.not.eql(\"\");",
							"pm.expect(jsonData.evaluation_history_id).to.not.eql(\"\");",
							"});",
							"",
							"",
							"",
							"//code to verify static key values in Response",
							"pm.test(\"Code to Verify Static key values in Response\",function(){",
							"pm.expect(jsonData.message).to.eql(\"Congrats on a successful snapshot!\");",
							"});",
							"}",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"memberId\":\"{{member_id}}\",\r\n\"brandId\":0,\r\n\"categoryId\":{{category_Id}},\r\n\"vertical1Score\":1,\r\n\"vertical2Score\":0,\r\n\"vertical3Score\":0,\r\n\"vertical1Comment\": \"test\",\r\n\"vertical2Comment\": \"test\",\r\n\"vertical3Comment\": \"test\",\r\n\"feedback\": \"testnew\",\r\n\"additionalFeedback\": \"testnew\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Learner Evaluation Rank API FE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "429d532d-d224-4d3a-babb-c1aa9e752be6",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"if(get_username == \"newmansd@mailinator.com\")",
							"{",
							" //code to verify 403 status code and message",
							"pm.test(\"Status code is 400 as we are logged in through SD\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"//code to verify body",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"message\": \"The brand value for the field Executive evaluation should be zero.\"",
							"});",
							"}); ",
							"}",
							"",
							"",
							"",
							"if(responseCode.code === 201)",
							"{",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"evaluation_history_id\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"message\",",
							"    \"evaluation_history_id\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.message).to.not.eql(\"\");",
							"pm.expect(jsonData.evaluation_history_id).to.not.eql(\"\");",
							"});",
							"",
							"",
							"",
							"//code to verify static key values in Response",
							"pm.test(\"Code to Verify Static key values in Response\",function(){",
							"pm.expect(jsonData.message).to.eql(\"Congrats on a successful snapshot!\");",
							"});",
							"}",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"memberId\":\"{{member_id}}\",\r\n\"brandId\":{{Learner_BrandId}},\r\n\"categoryId\":{{category_Id}},\r\n\"vertical1Score\":1,\r\n\"vertical2Score\":0,\r\n\"vertical3Score\":0,\r\n\"vertical1Comment\": \"test\",\r\n\"vertical2Comment\": \"test\",\r\n\"vertical3Comment\": \"test\",\r\n\"feedback\": \"testnew\",\r\n\"additionalFeedback\": \"testnew\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Aggregated Proficiency Score",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a478f414-cd63-429c-a6ca-f0d42650366e",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"\r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category_id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical1_avg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical2_avg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical3_avg\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category_color\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"outer_color\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"name\",\r",
							"        \"category_id\",\r",
							"        \"vertical1_avg\",\r",
							"        \"vertical2_avg\",\r",
							"        \"vertical3_avg\",\r",
							"        \"category_color\",\r",
							"        \"outer_color\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//code to verify values of keys that cannot be set as null\r",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							"pm.expect(jsonData[0].name).to.not.eql(\"\");\r",
							"pm.expect(jsonData[0].category_id).to.not.eql(\"\");\r",
							"pm.expect(jsonData[0].vertical1_avg).to.not.eql(\"\");\r",
							"pm.expect(jsonData[0].vertical2_avg).to.not.eql(\"\");\r",
							"pm.expect(jsonData[0].vertical3_avg).to.not.eql(\"\");\r",
							"pm.expect(jsonData[0].category_color).to.not.eql(\"\");\r",
							"pm.expect(jsonData[0].outer_color).to.not.eql(\"\");\r",
							"});\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/aggregated-score?_format=json&member_id={{member_id}}&brand_id={{Learner_BrandId}}",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"aggregated-score"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "member_id",
							"value": "{{member_id}}"
						},
						{
							"key": "brand_id",
							"value": "{{Learner_BrandId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Badges For Fiscal Year",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c24c855b-6505-4476-b666-c690c8644ec7",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgeName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgeImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"badgeCount\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"pointValue\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"year\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeId\",",
							"        \"badgeName\",",
							"        \"badgeImage\",",
							"        \"badgeCount\",",
							"        \"pointValue\",",
							"        \"year\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].badgeId).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgeName).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgeImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].badgeCount).to.not.eql(\"\");",
							"pm.expect(jsonData[i].pointValue).to.not.eql(\"\");",
							"pm.expect(jsonData[i].year).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/badges/archive/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"badges",
						"archive",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "start",
							"value": "2018/11/28",
							"disabled": true
						},
						{
							"key": "end",
							"value": "2018/12/03",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Evaluation History Comment Listing",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "52760e2f-18ba-4391-a880-d4b59cbe5434",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"    \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"memberId\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"date\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"categoryName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical1Score\": {\r",
							"         \r",
							"        },\r",
							"        \"vertical2Score\": {\r",
							"          \r",
							"        },\r",
							"        \"vertical3Score\": {\r",
							"          \r",
							"        },\r",
							"        \"currentRank\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"previousRank\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical1Comment\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical2Comment\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical3Comment\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"feedback\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"additionalComment\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"memberId\",\r",
							"        \"date\",\r",
							"        \"categoryName\",\r",
							"        \"vertical1Score\",\r",
							"        \"vertical2Score\",\r",
							"        \"vertical3Score\",\r",
							"        \"currentRank\",\r",
							"        \"previousRank\",\r",
							"        \"vertical1Comment\",\r",
							"        \"vertical2Comment\",\r",
							"        \"vertical3Comment\",\r",
							"        \"feedback\",\r",
							"        \"additionalComment\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"  var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"    \r",
							"    \r",
							"    \r",
							"//code to verify values of keys that cannot be set as null\r",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							" for(i=0;i<count;i++)\r",
							" {\r",
							" pm.expect(jsonData[i].memberId).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].date).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].categoryName).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].currentRank).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].previousRank).to.not.eql(\"\");\r",
							" }\r",
							" });\r",
							" }\r",
							"}\r",
							" \r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/history/user/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"history",
						"user",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "0",
							"disabled": true
						},
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "comments",
							"value": "true",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get -My team Dashboard History",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79ba34c8-8be7-4550-8ee4-df59cae149b1",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"    \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"var get_username = pm.environment.get(\"username\")\r",
							"\r",
							"if(get_username == \"newmansd@mailinator.com\")\r",
							"{\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"date\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"operation_type\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"categoryName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical1Score\": {\r",
							"        \r",
							"        },\r",
							"        \"vertical2Score\": {\r",
							"        \r",
							"        },\r",
							"        \"vertical3Score\": {\r",
							"         \r",
							"        },\r",
							"        \"module_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badge_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgePoints\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgeImage\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"badgeDescription\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical1Comment\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical2Comment\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"vertical3Comment\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"date\",\r",
							"        \"operation_type\",\r",
							"        \"categoryName\",\r",
							"        \"vertical1Score\",\r",
							"        \"vertical2Score\",\r",
							"        \"vertical3Score\",\r",
							"        \"module_name\",\r",
							"        \"badge_name\",\r",
							"        \"badgePoints\",\r",
							"        \"badgeImage\",\r",
							"        \"badgeDescription\",\r",
							"        \"vertical1Comment\",\r",
							"        \"vertical2Comment\",\r",
							"        \"vertical3Comment\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else if(get_username == \"FEdnewman@mailinator.com\")\r",
							"{\r",
							"    var schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"headers\": {\r",
							"      \"type\": \"object\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"headers\"\r",
							"  ]\r",
							"}\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"  var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {\r",
							"    count = jsonData.length;\r",
							"    });\r",
							"    \r",
							"    \r",
							"    \r",
							"//code to verify values of keys that cannot be set as null\r",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							" for(i=0;i<count;i++)\r",
							" {\r",
							" pm.expect(jsonData[i].id).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].name).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].date).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].operation_type).to.not.eql(\"\");\r",
							" pm.expect(jsonData[i].categoryName).to.not.eql(\"\");\r",
							" }\r",
							" });\r",
							" }\r",
							"}\r",
							"\r",
							" \r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v2/dashboard/history/{{user_id}}?format=json&type=learner",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v2",
						"dashboard",
						"history",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "type",
							"value": "learner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Proficiency PDF's - Get API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "029d57c7-71f0-4735-8192-bd4112bd04c9",
						"exec": [
							"if(responseCode.code === 200)\r",
							"{\r",
							"    \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"aggr_pdf\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"title\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"PFD_link\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"title\",\r",
							"            \"PFD_link\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"aggr_pdf\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"  var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//below code is to count the number of Objects in array of Results\r",
							" pm.test('Count of Objects in array of Results = '+jsonData.aggr_pdf.length,function () {\r",
							"    count = jsonData.aggr_pdf.length;\r",
							"    });\r",
							"    \r",
							"    \r",
							"    \r",
							"//code to verify values of keys that cannot be set as null\r",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){\r",
							" for(i=0;i<count;i++)\r",
							" {\r",
							" pm.expect(jsonData.aggr_pdf[i].title).to.not.eql(\"\");\r",
							" pm.expect(jsonData.aggr_pdf[i].PFD_link).to.not.eql(\"\");\r",
							" }\r",
							" });\r",
							" }\r",
							"}\r",
							" \r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/proficiency_pdf/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"proficiency_pdf",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Evalution Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "95d63a64-6225-4781-b12b-e053c9bef09a",
						"exec": [
							"if(responseCode.code === 201)\r",
							"{\r",
							"\r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"message\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//code to verify static key values in Response\r",
							"pm.test(\"Code to Verify Static key values in Response\",function(){\r",
							"pm.expect(jsonData.message).to.eql(\"Email has been sent\");\r",
							"});\r",
							"}\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"recipient\": \"nupur.goel@srijan.net\",\n\"text\": \"Evaluation history comment email testing\",\n\"evaluation_history_id\": \"123\"\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/email/send?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"email",
						"send"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Learners Profile Image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8946b41-8b10-4cd2-8de5-c445dd1cff93",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"if(get_username == \"newmansd@mailinator.com\")",
							"{",
							"  //code to verify Status Code",
							"  pm.test(\"Status code is 400 as SD cannot change FE's profile pic\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"}",
							"",
							"",
							"",
							"",
							"if(responseCode.code === 201)",
							"{",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"message\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.message).to.not.eql(\"\");",
							"});",
							"",
							"",
							"",
							"//code to verify static key values in Response",
							"pm.test(\"Code to Verify Static key values in Response\",function(){",
							"pm.expect(jsonData.message).to.eql(\"User profile picture updated successfully.\");",
							"});",
							"}",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"filename\": \"test.jpeg\",\n\"filesize\": \"1\",\n\"width\" :200,\n\"height\": 200,\n\"image\": \"/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxAQEBUPDw8QEBUPFQ8QDxUQEA8QFQ8PFRUWFhcVFRUYHSggGBolHRUVITIhJSkrLi4uFx8zODMtNygtLisBCgoKDQ0OFRAQFS0dFh0tKy0tKy0rLS0tLS0rLS0rLSstNy0tLSsrLSstKzctLS0rKy0tLS0tKy0rLS0rLSsrK//AABEIAMgA/AMBIgACEQEDEQH/xAAcAAABBQEBAQAAAAAAAAAAAAACAAEDBAUGBwj/xAA5EAABAwIDBAcHAwQDAQAAAAABAAIRAyEEEjEFQVFhBiJxgZGhsRNCUmLB0fAycoIHI+HxFJKiJP/EABgBAQEBAQEAAAAAAAAAAAAAAAABAgME/8QAHhEBAQEBAQEAAwEBAAAAAAAAAAERAjEhA0FREhP/2gAMAwEAAhEDEQA/AORARtCZoUjQo0doRgJAI2hUIBGAkAjAVUgEYCQCIBFIBOAnATwiaZJOVj4/brKZLWDM4Wn3R91NNaznAakDtMLPxG3KDDGYu/aJHiuVxmKdUOd7i7WOQnQDcqbnklNTXVVekjPcpvPMkN+6EdJhvp9sP08ly5JQl6Jrpx0mJIimADrcmByUx6SsHuOPGCPquQDzuT5jzQ11g6UUt7KndlP1VrD7foPMddv7m/YlcS1p4KS2+0aQhr0VrgRIMg6EJ1yexdsmk7JUJLHGZOrSd/YurY8OEtIIOhF0U6SSSrRkxRJIAKYoimIQAUJRlCURGUCkKFBWaFI0IWhSALKHARgJgFI0KqTQpAEwCMBVSARAJAIgFE0gE8JwFBjcS2m2TcmzQNSdPqiMPb20iT7Gmd8OI3umIlZZw0XIsA3vsNFpPwDhUFrmY/db87lLj6EdXgA0cphxPmouObqMn6DkoqgDfRXMS0NPD1lUhTm+647+HoiVESSibS4qxRw5jMdNAgquEwNB5omIyYUZeUnFMqCDjxRByBOCEQYIWnsfaz6Jgy5h1Hw8Y+yygU+dB6NRqteA5pkOEgqRc70Y2mzKKLjldJLCTZ07geK6JGiTIk0IpoQlEkQqqMoSpCgKCNwQqQhAUELQpAEwCNoWUO0KQBMApAFQgEQCQCMBAwCIBOAnhEIBZ7aPtcQDBGUH9XvQLRxH2Wk1gNiY58O7etNmDawNtdgAB1sfvdStRkYhmV7NLip3QR9/JY+OOVuY61HQ3kGtcT5mP4rb2ybsIGucD+fV/OxYe2BD2tm1JpJ7QDPn6qLXO45pc48pDRwggep9Vd2XggS0GwABJiZzSZ/6+qjq4Y5ATaY7ybuPmFosqBrSdC68fDJgd0Zh3Ks4obTZbqiBfKPhbpJ8B5rEq27lvbSqgNjsAHKIA8FjmlvNkSqkInNjtU5ECTv07lWc6SqyFJMSkEBBOHIQiaUEjDeRYrvdj4wVqQdMkWdOoPNcBC6Poe453gaZQT+6beU+CLHVJk6SKZMiTFABQFSFCQq0jKAhSFAUQDQpGhM0KRoWUOAjASaEYCKQCIBIBEAqEAnhOAnhFOw7phWsVXilJJESJ49/gqrRf17FpGk2pRyCL8hH3BUo5WlizUewH3H1CZ4NGYeMqHFML3Qe15PCSYPfHguk2L0Oqvc4tkfDmbY9/YrG0OiFcCHCJguLb5u37LOtY4mox1Wo1rQS1ojXjO/drKWKpNYDEuiBa+Z0QGju8p4rfxWyK1LqsbAIN4knfJ+yxa+Aq5oy2bMZoOupvvPFXUsrFqU3A5392+/AKjUqXk/65LdxjIsASSLkiZHI3jy7FkVMMTdVmyqFSTcqIhXH0VA9qrKKEk5SARCRAJgnQOFs9E6hGIj4muB8j9FjLa6KUS7EZrw1rj42CLHaJJ0kUyYokyAChKMoSioyhKMoUCaFI0JmhSNCiHARAJAIgFVIBEAkAjARTAJ4TgJ4QCQtLYbC+symPfcG9kmCfCVQhdB0GoB2NZ8rajv/ADH1Uo9OoYZrBYDgq+0aQMW/0tBUMeTYdvilnxmX65XG4RpeTHEctVgbYwTQNBMfZdTtB0Edp/yuc2s+Z8Owrk9McVtDDNH5quexFMZrbpXSbUkC/cudxlj2qxOmbVpBZ9YK9WeqNYrpHDpWISTlJVgydJJA4XS9Cz16g+VvquZXQdDnf3yOLHeoRY7FOnhJVsKYokxUQBQlGUJREZQlGUKgkaFIAmARgIpAIwEwCMBVSARAJAIgEDAJ4TwnhA0LpOgI/wDtb+ypPgudAXZ/06osD31CetlyCeZBMeSJXfFUKkuceWiuVjayq4fQqVI53a7CDmmALfdcxjndU7uPb+BdH0jrmco3+q5bFAuJHBcq9PPjk9pVBBnnC5rGVuK6HbDBJvpZcpi9Z4ytSMd1CTKgfTlEXJwtuaA0FG5sK4q9YIliAImtlM0SVdp08onUozJoG4SRqR4ei2+h1A+2eT7rQPE/4WS+dSuh6HCTUdG5g9UjWOkITQihJaUCYoihKAShKMoSssoyhKMhAUFgBGAmARgI0cBEAkAiAVCARAJAIgEDQnhPCeEAwruzsQWywVPZZ9Kl+o4aExuVSEoQdBs3pnWpu/4+NblcCQ2oLsqjTM1wsf8AK6LD7YGXNNgTPILjtgdHGYhlYkOe4ZIccjnUw4PByBwgDktDorsN9F//ABy976TgW9c5iyB1b7tOK5105zFXpLt+m05tdwggg964DafSl7nEU4Av+SrX9QGuo1nUploJHeFx1JvtHhhMA79YSQ7t8i7iatSoOs9om/WeweWqoPwhm729zguvp9Ew6iC1xgQSDHWcJgnxPisHHbMyuysaRG//ACtax/ms0YaE7mQr1HAv3zZNiGQIKaYoKOqFKoqxVZqKj+pS1nKFpupy3MeQQgKTzMLsuiFOKT3fE+B3AfdcpTpknK0XJAHaV6Bs3CexpNp7wOtzcblIqymTpLQApiiKEoBKEoimKygCoypCgKItAIwEwCMBVo4CIBMAjAQIBEAkAiAQNCeE4CeFQMJQihNCDsv6buGas3iKR7gXg+oXY+wAOaAA2SI4xqvN+iGN9ji2SYbUmk7+Wn/oNXpOOqhlNzuDSs1m+vnr+p1UOxbiOJnxK5jZYaHjNpPgt3pyAa5JdqSuapVIgwYCzPHbr161sSpFMNMEeqi2tgmuuA0T6LP6PY5rqQEzZWMfjIsdyw6RiYqk1gIG9cvtJ0lbeNxVzKxMWQSStRjpQVes5WKllVqLbjQBWqLZVUK1hzZEi/stn9+kB8bSecXXflcT0dAOJpz8xHblK7YqxoySSSoEoSiKEoAKYoihKygSoypCgKIuBGEwRAKtCARBMAjAQIIgEgE4VCCdIBOgZJOkgYEi4sRccivR9rbTD9nitN6jGn+UXHiCF5wuk2RjKLsFVoYgOIpkmnlOU9bUAngRP8lnrwnseM7ZrmrVJJ0J9VDi6gLQ1oEDXS62dtbHwzs3s31Q8AvLXZHCJ0BEGVybsPBPJZjXVbXRnHPZVyCS1xjkF021qh8VymCrtY0FXsVtcVGxKljXNyM7E1rm6gD0NU3UZK0xaJ4VKop31FXJVYplYwxsq5Vuk2AhGhsd+XEUz84Hjb6rvSvOKT8rg74SD4GV6ODInjdWNGQoimVAlCURTFABQlEUKiBKAoygKiL4RgJgjAVaOAiCYIggcIgmCIKhQknToBShElCAYSfWLQBIhxhxI/Qd1988+CKFDiG20ki4337FLNWLOK6LspUzXe+qXOaWzAAg6EE8F5/tPZ9MOLRVaZMkFsR4fl17dsXblOvg5qATTAp1BAdpoY4H7rlukuPw2U/8amy4hxp0w0mxFzGungFzdJJf08qqYYn+21wcRERf83KnicM+mesCDvBsulqvytMQC4kkc+apYhxe2H9x+iusXliEqMvUuJZGiquWmLTOKEJEpkZHSbJVwKKgyFMjUIL0DY9bPh6bvlDT2ix9F5+tbYm13UOqRmY4yRvB4hFdoUJVRm1sO4AiqwTuccpHbKtNcCJBBB0IMgrQSEpyhJQMUKclMsshKAoygKDQapAhARgKtHCIJBOFQ4ThIIggSdJOgZKE4Ciq4pjJzOFpsLlFkt8SQgrRlJOgBPgs7FbW1DByk68+SBuKOTMTMXO8luhhR05/F/Vvo1tMNrlrrUXzTdpo4dUni6SPNVuk+ApMqkUXOhwuJ32E+fks2piMjxBu2C2N5vE+agxG1C+pm3SR1joZ9fus4zfnxFRw4nLUdGsE7+9UdoBrTlmY059hRbSxodJFtYkm/YsLE1y4i+gTGb0fF1sxmfG6pvKd755o2YV7ohpM6WPYqwgU9GlvKsuwBp/q1KQamrIYJ05Cic9RUqQKhzoXVUTU9Z8BDgto1aJmm9w5TLT2jRVHOJTBVNd5sjb1OsA15DKmhBsHH5T9FqFeYgrW2dt6tSsT7RvB5NhyO5B26SzsBtqjWsHZHfC63gdCtBFMUBRlCURpgIgmCIKtCCcJgiCocJwlYCXGATA4udBMDnAUFXFwLd5Ecrg+f8hzRvn8d6TVagYJcY5bz3eHiFmYnbgb+lk9v08v+zVUxlZ15NzqZjkTH5b9oWbUMmYPHTXUwY094d/IKOv/AD5i7W2vUfqYHAWG/wAbg9zed6T8Sd54XN9Lz6nwCjqGNCd/HSQBvt7p7o3FUn1iTP3Me9z5+PYou4vU6vbv47tRbtv2wr+Hf1YPMGdI/PBYlL8HiOHMfhV/CVfp6chy+19Ksp6xEFp33BtYlotr2rPxGzH6sdJBkTb8K1cTQLhA+Ub94j6/mqz6OKczqu7uUgGx70Z65l9Z79lYh0AttoILTE8TvU2E6NukurmGNMO9mZceME2WszEyLdtt0T9QtLB7Pq4zGexYXtpGKjywMkhzoJLjoAPNGLxxzNrEpDA0XCMPUfZzgarwQSPlAjxnRbWB2nhapBDIgg5YGoELjcVUc5r75vYVHtDh77JIn0Kp4bEFhkFYvLP+pPJ8db0owjXQ6jpw+FcyWkblqUdqZhBQPpZjIUnxblZFVxUDWk6f6Wpj8JAkmBvKyqtXc2w/NVqOd+AfqhSSVZOkkkgdJJJAQK19m7fq0uq7+43g43A5FYyeUHoGC2lSrDqOvvabOHdv7lYIXnDXEXBiFo0tu4hoj2kx8QDj4lB6YEQSSWmhBGxpJgb9EkkIpdIq3s6lNkyG5tN7spJnkfzRU8RWtcg7zMaA+Gh7L8DZJKPZ4zKjzz7bi4zAnd8DTPLkVXfUvuGh3CLtO/t3/QykkZqlVqiO7S3Abo5eX7oh4m2/h82vn+SEklHPfqamPW8DgRz5u8+c2KLo/D8J58x+RKSRqNOhUB4W48oiZ/LX4KttDCh4tE3ntDZIMDl6ncZSSrbLpudTdDhEE6gi0kE+XktQYoil1XObqx2VxGZpgkGNRfQpJIxP4puo08kNEAgiBC5lzMpI4JJKOf5f0koEyug2ayUklnpnll9I8XmqZBoy3a7esdOktMdeknSSRkkkkkUkkkkDpJJIElKSSD//2Q==\"\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v2/learners/profile/picture/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v2",
						"learners",
						"profile",
						"picture",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Leaderboard API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28c1d49f-454c-44f8-aa0a-bc82c11d4ed6",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"if(get_username == \"newmansd@mailinator.com\")",
							"{",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"dataBa\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"role\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"area\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"region\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"rank\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"regionId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"memberId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"firstName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"lastName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"brandId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"brandName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"dateOfJoining\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"dateOfBirth\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userImage\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"proficiencyScore\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"doorId\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"doorName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"snapshot\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"updatedOn\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgesPoints\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"createdOn\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"territoryId\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"role\",",
							"            \"area\",",
							"            \"region\",",
							"            \"rank\",",
							"            \"regionId\",",
							"            \"memberId\",",
							"            \"userId\",",
							"            \"firstName\",",
							"            \"lastName\",",
							"            \"brandId\",",
							"            \"brandName\",",
							"            \"dateOfJoining\",",
							"            \"dateOfBirth\",",
							"            \"userImage\",",
							"            \"proficiencyScore\",",
							"            \"doorId\",",
							"            \"doorName\",",
							"            \"snapshot\",",
							"            \"updatedOn\",",
							"            \"badgesPoints\",",
							"            \"createdOn\",",
							"            \"territoryId\"",
							"          ]",
							"        }",
							"      ]",
							"    },",
							"    \"dataFe\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"role\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"area\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"region\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"rank\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"regionId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"memberId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"firstName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"lastName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"brandId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"brandName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"dateOfJoining\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"dateOfBirth\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userImage\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"proficiencyScore\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"doorId\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"doorName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"snapshot\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"updatedOn\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgesPoints\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"createdOn\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"territoryId\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"role\",",
							"            \"area\",",
							"            \"region\",",
							"            \"rank\",",
							"            \"regionId\",",
							"            \"memberId\",",
							"            \"userId\",",
							"            \"firstName\",",
							"            \"lastName\",",
							"            \"brandId\",",
							"            \"brandName\",",
							"            \"dateOfJoining\",",
							"            \"dateOfBirth\",",
							"            \"userImage\",",
							"            \"proficiencyScore\",",
							"            \"doorId\",",
							"            \"doorName\",",
							"            \"snapshot\",",
							"            \"updatedOn\",",
							"            \"badgesPoints\",",
							"            \"createdOn\",",
							"            \"territoryId\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"dataBa\",",
							"    \"dataFe\"",
							"  ]",
							"}  ",
							"}",
							"",
							"",
							"else if(get_username == \"FEdnewman@mailinator.com\")",
							"{",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"dataBa\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"role\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"area\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"region\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"rank\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"regionId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"memberId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"firstName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"lastName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"brandId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"brandName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"dateOfJoining\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"dateOfBirth\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userImage\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"proficiencyScore\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"doorId\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"doorName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"snapshot\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"updatedOn\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgesPoints\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"createdOn\": {",
							"              \"type\": \"string\"",
							"            },",
							"          },",
							"          \"required\": [",
							"            \"role\",",
							"            \"area\",",
							"            \"region\",",
							"            \"rank\",",
							"            \"regionId\",",
							"            \"memberId\",",
							"            \"userId\",",
							"            \"firstName\",",
							"            \"lastName\",",
							"            \"brandId\",",
							"            \"brandName\",",
							"            \"dateOfJoining\",",
							"            \"dateOfBirth\",",
							"            \"userImage\",",
							"            \"proficiencyScore\",",
							"            \"doorId\",",
							"            \"doorName\",",
							"            \"snapshot\",",
							"            \"updatedOn\",",
							"            \"badgesPoints\",",
							"            \"createdOn\",",
							"          ]",
							"        }",
							"      ]",
							"    },",
							"    \"dataFe\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"role\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"area\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"region\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"rank\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"regionId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"memberId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"firstName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"lastName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"brandId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"brandName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"dateOfJoining\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"dateOfBirth\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userImage\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"proficiencyScore\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"doorId\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"doorName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"snapshot\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"updatedOn\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"badgesPoints\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"createdOn\": {",
							"              \"type\": \"string\"",
							"            },",
							"          },",
							"          \"required\": [",
							"            \"role\",",
							"            \"area\",",
							"            \"region\",",
							"            \"rank\",",
							"            \"regionId\",",
							"            \"memberId\",",
							"            \"userId\",",
							"            \"firstName\",",
							"            \"lastName\",",
							"            \"brandId\",",
							"            \"brandName\",",
							"            \"dateOfJoining\",",
							"            \"dateOfBirth\",",
							"            \"userImage\",",
							"            \"proficiencyScore\",",
							"            \"doorId\",",
							"            \"doorName\",",
							"            \"snapshot\",",
							"            \"updatedOn\",",
							"            \"badgesPoints\",",
							"            \"createdOn\",",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"dataBa\",",
							"    \"dataFe\"",
							"  ]",
							"}  ",
							"}",
							"",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of dataBa",
							" pm.test('Count of Objects in array of dataBa = '+jsonData.dataBa.length, function () {",
							"    count = jsonData.dataBa.length;",
							"    });",
							"",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null in dataBa array",
							"pm.test(\"Value of the keys that cannot be set as null for dataBa\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData.dataBa[i].role).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].rank).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].memberId).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].userId).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].firstName).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].lastName).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].brandId).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].brandName).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].proficiencyScore).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].snapshot).to.not.eql(\"\");",
							"pm.expect(jsonData.dataBa[i].badgesPoints).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"//code to verify some of the static values in Response for dataBa",
							"pm.test(\"Code to verify some of the static values in Response for dataBa\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData.dataBa[i].role).to.eql(\"Beauty Advisor\");",
							"}",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of dataFe",
							" pm.test('Count of Objects in array of dataFe = '+jsonData.dataFe.length, function () {",
							"    count = jsonData.dataFe.length;",
							"    });",
							"",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null in dataFe array",
							"pm.test(\"Value of the keys that cannot be set as null for dataFe\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData.dataFe[i].role).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].rank).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].memberId).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].userId).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].firstName).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].lastName).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].brandId).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].brandName).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].proficiencyScore).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].snapshot).to.not.eql(\"\");",
							"pm.expect(jsonData.dataFe[i].badgesPoints).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"",
							"",
							"//code to verify some of the static values in Response for dataFe",
							"pm.test(\"Code to verify some of the static values in Response for dataFe\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData.dataFe[i].role).to.eql(\"Field Executive\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/leaderboard/{{user_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"leaderboard",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "limit",
							"value": "3",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Rank Up Eligibility ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35e33e82-b752-4742-adf0-4fa10d8081d8",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							" ",
							" var get_username = pm.environment.get(\"username\")",
							" ",
							" if(get_username== \"FEdnewman@mailinator.com\")",
							"",
							"{",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"snapshotCount\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"rank\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"rankUpCount\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"rankUpEligible\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"snapshotCount\",",
							"    \"rank\",",
							"    \"rankUpCount\",",
							"    \"rankUpEligible\"",
							"  ]",
							"}  ",
							"}",
							"",
							"",
							"else if(get_username== \"newmansd@mailinator.com\")",
							"{",
							"   var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"snapshotCount\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"rank\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"rankUpCount\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"rankUpEligible\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"snapshotCount\",",
							"    \"rank\",",
							"    \"rankUpCount\",",
							"    \"rankUpEligible\"",
							"  ]",
							"}   ",
							"}",
							"",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.snapshotCount).to.not.eql(\"\");",
							"pm.expect(jsonData.rank).to.not.eql(\"\");",
							"pm.expect(jsonData.rankUpCount).to.not.eql(\"\");",
							"pm.expect(jsonData.rankUpEligible).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/eligibleForPromotion/{{user_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"eligibleForPromotion",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Promote user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a13858c4-d812-41e4-9bc9-244fd6e4c717",
						"exec": [
							"if(responseCode.code === 200 || 201)\r",
							"{\r",
							" \r",
							"    \r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"//code to verify Blank Array In Response\r",
							" pm.test(\"Blank Response Verification\",function(){\r",
							" pm.expect(jsonData.length).to.not.eql(0);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"   \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"rankUpCount\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"snapshotCount\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"rank\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"evaluationHistoryId\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"message\",\r",
							"    \"rankUpCount\",\r",
							"    \"snapshotCount\",\r",
							"    \"rank\",\r",
							"    \"evaluationHistoryId\"\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"  \r",
							"\r",
							"  pm.test(\"Value of the keys that cannot be set as null\",function(){  \r",
							"  pm.expect(jsonData.message).to.not.eql(\"\");\r",
							"  pm.expect(jsonData.rankUpCount).to.not.eql(\"\");\r",
							"  pm.expect(jsonData.snapshotCount).to.not.eql(\"\");\r",
							"  pm.expect(jsonData.rank).to.not.eql(\"\");\r",
							"  pm.expect(jsonData.evaluationHistoryId).to.not.eql(\"\");\r",
							" });\r",
							" }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"memberId\" : \"{{member_id}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/promote?format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"promote"
					],
					"query": [
						{
							"key": "format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Seminar Access token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b535bdc-ccd1-4a08-9132-ebefbf94ed06",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"if(get_username == \"FEdnewman@mailinator.com\")",
							"{",
							" //code to verify Blank Array In Response",
							" pm.test(\"Blank Array is there in Response as SD will not get feedback for BA\",function(){",
							" pm.expect(jsonData.length).to.eql(0);",
							" });",
							" }",
							"",
							"",
							"",
							"",
							"else if(responseCode.code === 200)",
							"{",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"access_token\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"expires_in\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"refresh_token\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"access_token\",",
							"    \"expires_in\",",
							"    \"refresh_token\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.access_token).to.not.eql(\"\");",
							"pm.expect(jsonData.expires_in).to.not.eql(\"\");",
							"pm.expect(jsonData.refresh_token).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/seminar/token?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"seminar",
						"token"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Role - Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7ffd0db-dd79-4c44-bb19-ab20ec0cda6d",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"         ",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"nid\",",
							"        \"levelImage\",",
							"        \"levelDescription\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelDescription).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"//code to fetch first nid and store it in an Environment Variable",
							"pm.environment.set(\"Role_level_id\",jsonData[0].nid);",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/education/my-role?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"education",
						"my-role"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My COE - Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "40e28a1e-337d-4be9-9c3a-2a9dfecd4d94",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"nid\",",
							"        \"levelImage\",",
							"        \"levelDescription\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelDescription).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"//code to fetch first nid and store it in an Environment Variable",
							"pm.environment.set(\"COE_level_id\",jsonData[0].nid);",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/education/my-coes?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"education",
						"my-coes"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Account - Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2c96998f-1f7f-4f8e-ba29-212d2f91a513",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"nid\",",
							"        \"levelImage\",",
							"        \"levelDescription\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelDescription).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"//code to fetch first nid and store it in an Environment Variable",
							"pm.environment.set(\"Account_level_id\",jsonData[0].nid);",
							"",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/education/my-account?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"education",
						"my-account"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Development - Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbdbc290-0cbe-4a5f-adc4-55dbe15e6814",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"nid\",",
							"        \"levelImage\",",
							"        \"levelDescription\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelDescription).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"//code to fetch first nid and store it in an Environment Variable",
							"pm.environment.set(\"Dev_level_id\",jsonData[0].nid);",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/education/my-development?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"education",
						"my-development"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Evaluation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d69c3a5-50ce-41f0-990a-8c670bfef813",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"member_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"first_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"role\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"brand_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"brand_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"area\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"region\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"date_of_joining\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"date_of_birth\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_image\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"rank\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_rank_up_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"proficiency_score\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_proficiency_score\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"created_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"updated_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"is_active\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"job_title_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"job_title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"unique_system_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"region_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"door_id\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"door_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"territory_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"snapshot_count\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"super_territory_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"badges_points\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"anniversary_date\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"level_status\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"learner_count\": {",
							"    },",
							"    \"fe_image\": {",
							"    },",
							"    \"fe_name\": {",
							"",
							"    },",
							"    \"fe_id\": {",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"member_id\",",
							"    \"user_id\",",
							"    \"first_name\",",
							"    \"last_name\",",
							"    \"role\",",
							"    \"brand_id\",",
							"    \"brand_name\",",
							"    \"area\",",
							"    \"region\",",
							"    \"date_of_joining\",",
							"    \"date_of_birth\",",
							"    \"user_image\",",
							"    \"rank\",",
							"    \"last_rank_up_on\",",
							"    \"proficiency_score\",",
							"    \"last_proficiency_score\",",
							"    \"created_on\",",
							"    \"updated_on\",",
							"    \"is_active\",",
							"    \"job_title_id\",",
							"    \"job_title\",",
							"    \"unique_system_id\",",
							"    \"region_id\",",
							"    \"door_id\",",
							"    \"door_name\",",
							"    \"territory_id\",",
							"    \"snapshot_count\",",
							"    \"super_territory_id\",",
							"    \"badges_points\",",
							"    \"anniversary_date\",",
							"    \"level_status\",",
							"    \"learner_count\",",
							"    \"fe_image\",",
							"    \"fe_name\",",
							"    \"fe_id\"",
							"  ]",
							"}  ",
							"}",
							"",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.id).to.not.eql(\"\");",
							"pm.expect(jsonData.member_id).to.not.eql(\"\");",
							"pm.expect(jsonData.first_name).to.not.eql(\"\");",
							"pm.expect(jsonData.last_name).to.not.eql(\"\");",
							"pm.expect(jsonData.role).to.not.eql(\"\");",
							"pm.expect(jsonData.rank).to.not.eql(\"\");",
							"pm.expect(jsonData.last_rank_up_on).to.not.eql(\"\");",
							"pm.expect(jsonData.created_on).to.not.eql(\"\");",
							"pm.expect(jsonData.is_active).to.not.eql(\"\");",
							"pm.expect(jsonData.job_title_id).to.not.eql(\"\");",
							"pm.expect(jsonData.job_title).to.not.eql(\"\");",
							"pm.expect(jsonData.unique_system_id).to.not.eql(\"\");",
							"pm.expect(jsonData.badges_points).to.not.eql(\"\");",
							"});",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v2/evaluation/detail-score/user/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v2",
						"evaluation",
						"detail-score",
						"user",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My COE - Modules",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f00acd1-8286-4d32-924e-1de1ba9f5b74",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myCoesDescription\": {",
							"          \"type\": \"null\"",
							"        },",
							"        \"myCoesImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"         ",
							"        },",
							"        \"moduleCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myCoesFiles\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleDuration\": {",
							"           \"type\": \"string\"  ",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"myCoesDescription\",",
							"        \"myCoesImage\",",
							"        \"moduleType\",",
							"        \"progress\",",
							"        \"moduleCategory\",",
							"        \"myCoesFiles\",",
							"        \"moduleDuration\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myCoesImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");",
							"pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myCoesFiles).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"//code to fetch nid of first moduleId",
							"pm.environment.set(\"COE_Module_Id\",jsonData[0].nid);",
							"",
							"",
							"pm.environment.set(\"COE_Title\",jsonData[0].title);",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/my_coes/{{COE_level_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"my_coes",
						"{{COE_level_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Development - Modules",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d000abca-2824-4d14-8d89-4eccb15063a2",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myDevelopmentDescription\": {",
							"          \"type\": \"null\"",
							"        },",
							"        \"myDevelopmentImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"moduleCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myDevelopmentFile\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleDuration\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"myDevelopmentDescription\",",
							"        \"myDevelopmentImage\",",
							"        \"progress\",",
							"        \"moduleCategory\",",
							"        \"moduleType\",",
							"        \"myDevelopmentFile\",",
							"        \"moduleDuration\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myDevelopmentImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");",
							"pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myDevelopmentFile).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/my_development/{{Dev_level_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"my_development",
						"{{Dev_level_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - My Accounts - Modules",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff0e31e3-d5fe-4c09-9a95-f5ac24510d8e",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"eduMyaccountsDescription\": {",
							"          \"type\": \"null\"",
							"        },",
							"        \"eduMyaccountsImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"moduleCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"eduMyaccountsFile\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleDuration\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"eduMyaccountsDescription\",",
							"        \"eduMyaccountsImage\",",
							"        \"moduleType\",",
							"        \"progress\",",
							"        \"moduleCategory\",",
							"        \"eduMyaccountsFile\",",
							"        \"moduleDuration\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].eduMyaccountsImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");",
							"pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].eduMyaccountsFile).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/my_accounts/{{Account_level_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"my_accounts",
						"{{Account_level_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Account dropdown List",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Country dropdown list",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "MY role module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3dab47e8-7a26-48d5-8390-67060ed41328",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myRoleDescription\": {",
							"          \"type\": \"null\"",
							"        },",
							"        \"myRoleImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"moduleCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myRoleFiles\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleDuration\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"myRoleDescription\",",
							"        \"myRoleImage\",",
							"        \"progress\",",
							"        \"moduleCategory\",",
							"        \"moduleType\",",
							"        \"myRoleFiles\",",
							"        \"moduleDuration\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myRoleImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");",
							"pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myRoleFiles).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/my_roles/{{Role_level_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"my_roles",
						"{{Role_level_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Module Progress",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11e38a91-190f-42f9-91b7-ee0f37783c68",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"message\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.message).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"moduleId\" : \"{{Infocus_Module}}\",\r\n\"type\" : \"infocus module\",\r\n\"levelId\" : \"{{Infocus_Level}}\",\r\n\"status\" : 3\r\n}\r\n"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/module/progress?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"module",
						"progress"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Blog list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8892697f-1c20-4e8b-8f9c-2c94cc6e7e0a",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"results\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"nid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"field_blog_thumbnail_image\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"changed\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"comment_count\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"field_blog_summary\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"nid\",",
							"            \"field_blog_thumbnail_image\",",
							"            \"title\",",
							"            \"changed\",",
							"            \"comment_count\",",
							"            \"field_blog_summary\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"results\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.results.length, function () {",
							"    count = jsonData.results.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].field_blog_thumbnail_image).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].changed).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].comment_count).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"//code to fetch nid of first Blog",
							"pm.environment.set(\"blog_id\",jsonData.results[0].nid);",
							"",
							"",
							"pm.environment.set(\"blog_title\",jsonData.results[0].title);",
							"",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/blog_listing?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"blog_listing"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "0",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Blog Detail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cc8d9dcf-0b58-4908-baeb-a19fb1e5e6d6",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"nid\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_blog_banner_image\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"changed\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_blog_description\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"nid\",",
							"    \"field_blog_banner_image\",",
							"    \"title\",",
							"    \"changed\",",
							"    \"field_blog_description\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.nid).to.not.eql(\"\");",
							"pm.expect(jsonData.field_blog_banner_image).to.not.eql(\"\");",
							"pm.expect(jsonData.title).to.not.eql(\"\");",
							"pm.expect(jsonData.changed).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"disabled": true
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/blog/details/{{blog_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"blog",
						"details",
						"{{blog_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Create Blog Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d234e62-aeaa-43ce-864e-a3d53749bd08",
						"exec": [
							"if(responseCode.code === 201)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"message\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//code to verify key value pair in Response",
							"pm.test(\"Code to verify key value pair in Response\",function(){",
							"pm.expect(jsonData.message).to.eql(\"Aww...thanks for sharing. You're brilliant.\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"nid\":\"{{blog_id}}\", \r\n\"comment\":\"Blog creating using postman script\", \r\n\"uid\":\"{{user_id}}\",\r\n\"filename\":\"File_Name.png\",\r\n\"filesize\":\"1000\", \r\n\"attach_file\":\"\" \r\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/blog/comments/post?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"blog",
						"comments",
						"post"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Blog comment listing",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b203ec2-aa99-4eaa-b063-99cdb1eded4e",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"results\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"uid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"user_picture\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"field_first_name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"field_last_name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"created\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"field_blog_comment\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"field_attach_document\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"cid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"pid\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"uid\",",
							"            \"user_picture\",",
							"            \"field_first_name\",",
							"            \"field_last_name\",",
							"            \"created\",",
							"            \"field_blog_comment\",",
							"            \"field_attach_document\",",
							"            \"cid\",",
							"            \"pid\"",
							"          ]",
							"        }",
							"      ]",
							"    },",
							"    \"pager\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"current_page\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"items_per_page\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"total_items\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"current_page\",",
							"        \"items_per_page\",",
							"        \"total_items\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"results\",",
							"    \"pager\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.results.length, function () {",
							"    count = jsonData.results.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData.results[i].uid).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].field_first_name).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].field_last_name).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].created).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].field_blog_comment).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].field_attach_document).to.not.eql(\"\");",
							"pm.expect(jsonData.results[i].cid).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"//code to fetch uid of first Comment and compare it with Member Id",
							"var get_userId = pm.environment.get(\"user_id\");",
							"pm.expect(get_userId).to.eql(jsonData.results[0].uid);",
							"",
							"",
							"//code to fetch first cid and store it in a Environment Variable",
							"pm.environment.set(\"cid_blog\",jsonData.results[0].cid);",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"disabled": true
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/blog/comments/{{blog_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"blog",
						"comments",
						"{{blog_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Blog Comment Edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "878ce72b-bcab-4ec3-9ed1-65c175a2fbd5",
						"exec": [
							"if(responseCode.code === 201)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"entity_type\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"entity_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"uid\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"comment_type\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_blog_comment\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_attach_document\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"pid\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"status\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"entity_type\",",
							"    \"entity_id\",",
							"    \"field_name\",",
							"    \"uid\",",
							"    \"comment_type\",",
							"    \"field_blog_comment\",",
							"    \"field_attach_document\",",
							"    \"pid\",",
							"    \"status\",",
							"    \"message\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.entity_type).to.not.eql(\"\");",
							"pm.expect(jsonData.entity_id).to.not.eql(\"\");",
							"pm.expect(jsonData.field_name).to.not.eql(\"\");",
							"pm.expect(jsonData.uid).to.not.eql(\"\");",
							"pm.expect(jsonData.comment_type).to.not.eql(\"\");",
							"pm.expect(jsonData.field_blog_comment).to.not.eql(\"\");",
							"pm.expect(jsonData.field_attach_document).to.not.eql(\"\");",
							"pm.expect(jsonData.status).to.not.eql(\"\");",
							"pm.expect(jsonData.message).to.not.eql(\"\");",
							"});",
							"",
							"",
							"",
							"//code to verify Static Values in Response",
							"pm.test(\"Code to verify Static values in Response\",function(){",
							"pm.expect(jsonData.entity_type).to.eql(\"node\");",
							"pm.expect(jsonData.field_name).to.eql(\"field_comments\");",
							"pm.expect(jsonData.comment_type).to.eql(\"blog_comment\");",
							"pm.expect(jsonData.status).to.eql(1);",
							"pm.expect(jsonData.message).to.eql(\"Comment successfully edited.\");",
							"});",
							"",
							"",
							"//code to verify Blog Id and memberId in Reponse",
							"var get_BlogId = pm.environment.get(\"blog_id\");",
							"var get_user_id = pm.environment.get(\"user_id\");",
							"pm.expect(get_BlogId).to.eql(jsonData.entity_id);",
							"pm.expect(get_user_id).to.eql(jsonData.uid);",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": " {\n   \"nid\":\"{{blog_id}}\", \n   \"comment\":\"Edit Comment content\", \n   \"uid\":\"{{user_id}}\", \n   \"cid\":\"{{cid_blog}}\", \n   \"filename\":\"File Name.png\",\n   \"attach_file\":\"\"\n}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/blog/comments/post?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"blog",
						"comments",
						"post"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - Blog Comment Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8dc8611-7b51-48da-8f27-37e7548756a1",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"message\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//code to verify key value pair in Response",
							"pm.test(\"Code to verify key value pair in Response\",function(){",
							"pm.expect(jsonData.message).to.eql(\"Your comment was successfully deleted\");",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"cid\":\"{{cid_blog}}\"}"
				},
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/blog/comments/delete?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"blog",
						"comments",
						"delete"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - FE Profile datail for SD",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9cf49523-c596-4bb1-8ddb-392272e7cc6f",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"member_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"first_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"role\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"brand_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"brand_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"area\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"region\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"date_of_joining\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"date_of_birth\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_image\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"rank\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_rank_up_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"proficiency_score\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_proficiency_score\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"created_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"updated_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"is_active\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"job_title_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"job_title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"unique_system_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"region_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"door_id\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"door_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"territory_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"snapshot_count\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"super_territory_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"badges_points\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"anniversary_date\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"level_status\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"learner_count\": {",
							"    },",
							"    \"fe_image\": {",
							"      ",
							"    },",
							"    \"fe_name\": {",
							"      ",
							"    },",
							"    \"fe_id\": {",
							"     ",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"member_id\",",
							"    \"user_id\",",
							"    \"first_name\",",
							"    \"last_name\",",
							"    \"role\",",
							"    \"brand_id\",",
							"    \"brand_name\",",
							"    \"area\",",
							"    \"region\",",
							"    \"date_of_joining\",",
							"    \"date_of_birth\",",
							"    \"user_image\",",
							"    \"rank\",",
							"    \"last_rank_up_on\",",
							"    \"proficiency_score\",",
							"    \"last_proficiency_score\",",
							"    \"created_on\",",
							"    \"updated_on\",",
							"    \"is_active\",",
							"    \"job_title_id\",",
							"    \"job_title\",",
							"    \"unique_system_id\",",
							"    \"region_id\",",
							"    \"door_id\",",
							"    \"door_name\",",
							"    \"territory_id\",",
							"    \"snapshot_count\",",
							"    \"super_territory_id\",",
							"    \"badges_points\",",
							"    \"anniversary_date\",",
							"    \"level_status\",",
							"    \"learner_count\",",
							"    \"fe_image\",",
							"    \"fe_name\",",
							"    \"fe_id\"",
							"  ]",
							"}  ",
							"}",
							"",
							" ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.id).to.not.eql(\"\");    ",
							"pm.expect(jsonData.memberId).to.not.eql(\"\");",
							"pm.expect(jsonData.userId).to.not.eql(\"\");",
							"pm.expect(jsonData.firstName).to.not.eql(\"\");",
							"pm.expect(jsonData.lastName).to.not.eql(\"\");",
							"pm.expect(jsonData.role).to.not.eql(\"\");",
							"pm.expect(jsonData.brandId).to.not.eql(\"\");",
							"pm.expect(jsonData.brandName).to.not.eql(\"\");",
							"pm.expect(jsonData.rank).to.not.eql(\"\");",
							"pm.expect(jsonData.last_rank_up_on).to.not.eql(\"\");",
							"pm.expect(jsonData.proficiencyScore).to.not.eql(\"\");",
							"pm.expect(jsonData.last_proficiency_score).to.not.eql(\"\");",
							"pm.expect(jsonData.created_on).to.not.eql(\"\");",
							"pm.expect(jsonData.is_active).to.not.eql(\"\");",
							"pm.expect(jsonData.job_title_id).to.not.eql(\"\");",
							"pm.expect(jsonData.job_title).to.not.eql(\"\");",
							"pm.expect(jsonData.unique_system_id).to.not.eql(\"\");",
							"pm.expect(jsonData.snapshot_count).to.not.eql(\"\");",
							"pm.expect(jsonData.badges_points).to.not.eql(\"\");",
							"pm.expect(jsonData.learner_count).to.not.eql(\"\");",
							"});",
							"",
							"",
							"//code to verify some of the static values in response",
							"var get_member_id = pm.environment.get(\"member_id\");",
							"var get_user_id = pm.environment.get(\"user_id\");",
							"pm.test(\"Code to verify some of the static key values in Response\",function()",
							"{",
							"pm.expect(get_member_id).to.eql(jsonData.member_id);",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v2/evaluation/detail-score/user/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v2",
						"evaluation",
						"detail-score",
						"user",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Door list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e4d56c19-4a80-4a50-a499-a1df4a7b4dab",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"door_id\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"door_name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"door_number\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"door_address\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"door_id\",",
							"        \"door_name\",",
							"        \"door_number\",",
							"        \"door_address\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].door_id).to.not.eql(\"\");",
							" pm.expect(jsonData[i].door_name).to.not.eql(\"\");",
							" pm.expect(jsonData[i].door_number).to.not.eql(\"\");",
							" pm.expect(jsonData[i].door_address).to.not.eql(\"\");",
							" }",
							" });",
							" }",
							"}",
							" ",
							" ",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/doors?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"doors"
					],
					"query": [
						{
							"key": "_format",
							"value": "json "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get - Regions List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73453969-3cee-4785-b052-cb04a3860378",
						"exec": [
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"if(get_username == \"FEdnewman@mailinator.com\")",
							"{",
							"    ",
							" //code to verify Blank Array In Response",
							" pm.test(\"Blank Array is there in Response as we are logged in through SD\",function(){",
							" pm.expect(jsonData.length).to.eql(0);",
							" });",
							" }",
							"",
							"",
							"",
							"else if(responseCode.code === 200)",
							"{",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"regionId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"regionName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"regionNumber\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"regionId\",",
							"        \"regionName\",",
							"        \"regionNumber\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].regionId).to.not.eql(\"\");",
							" pm.expect(jsonData[i].regionName).to.not.eql(\"\");",
							" }",
							" });",
							" }",
							"}",
							" ",
							" else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/regions?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"regions"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Language Switcher",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2368b12e-ca5b-4a77-a5b4-83df5ab59277",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"primary\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"languageCode\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"languageName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"languageDirection\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"languageCode\",",
							"        \"languageName\",",
							"        \"languageDirection\"",
							"      ]",
							"    },",
							"    \"secondary\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"languageCode\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"languageName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"languageDirection\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"languageCode\",",
							"            \"languageName\",",
							"            \"languageDirection\"",
							"          ]",
							"        },",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"languageCode\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"languageName\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"languageDirection\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"languageCode\",",
							"            \"languageName\",",
							"            \"languageDirection\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"primary\",",
							"    \"secondary\"",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"    ",
							"//code to verify key value pairs in response for Primary Language",
							" pm.test(\"Code to verify key value pairs in response\",function(){",
							" pm.expect(jsonData.primary.languageCode).to.eql(\"en\");",
							" pm.expect(jsonData.primary.languageName).to.eql(\"English\");",
							" pm.expect(jsonData.primary.languageDirection).to.eql(\"ltr\");",
							" });",
							" ",
							" ",
							" ",
							" //code to verify key value pairs in response for Secondary Language",
							" pm.test(\"Code to verify key value pairs in response\",function(){",
							" pm.expect(jsonData.secondary[0].languageCode).to.eql(\"fr\");",
							" pm.expect(jsonData.secondary[0].languageName).to.eql(\"French\");",
							" pm.expect(jsonData.secondary[0].languageDirection).to.eql(\"ltr\");",
							" pm.expect(jsonData.secondary[1].languageCode).to.eql(\"es\");",
							" pm.expect(jsonData.secondary[1].languageName).to.eql(\"Spanish\");",
							" pm.expect(jsonData.secondary[1].languageDirection).to.eql(\"ltr\");",
							" });",
							" }",
							"}",
							" ",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/languageSwitcher?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"languageSwitcher"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Blog",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "19aed6ff-76a9-4cc6-bcd4-ea1b1da9aec5",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//code to Verify Response Headers and their values",
							"pm.test(\"Verify Response Headers\", function () {",
							"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"",
							"",
							"//code to Verify Response Time",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"description\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"blogId\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"imageSmall\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"commentDate\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"commentCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"contentType\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"description\",",
							"        \"blogId\",",
							"        \"imageSmall\",",
							"        \"commentDate\",",
							"        \"commentCount\",",
							"        \"contentType\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].title).to.not.eql(\"\");",
							" pm.expect(jsonData[i].description).to.not.eql(\"\");",
							" pm.expect(jsonData[i].blogId).to.not.eql(\"\");",
							" pm.expect(jsonData[i].commentDate).to.not.eql(\"\");",
							" pm.expect(jsonData[i].commentCount).to.not.eql(\"\");",
							" pm.expect(jsonData[i].contentType).to.not.eql(\"\");",
							" }",
							" });",
							" }",
							"}",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{lm_url}}/lm/api/v1/search?_format=json&searchTerm={{blog_title}}&type=blogs",
					"host": [
						"{{lm_url}}"
					],
					"path": [
						"lm",
						"api",
						"v1",
						"search"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "searchTerm",
							"value": "{{blog_title}}"
						},
						{
							"key": "type",
							"value": "blogs "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Brand",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73c27494-6a60-4255-9a5d-2a9acb22e96d",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//code to Verify Response Headers and their values",
							"pm.test(\"Verify Response Headers\", function () {",
							"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"",
							"",
							"//code to Verify Response Time",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"description\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"blogId\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"imageSmall\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"commentDate\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"commentCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"contentType\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"description\",",
							"        \"blogId\",",
							"        \"imageSmall\",",
							"        \"commentDate\",",
							"        \"commentCount\",",
							"        \"contentType\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].title).to.not.eql(\"\");",
							" pm.expect(jsonData[i].description).to.not.eql(\"\");",
							" pm.expect(jsonData[i].blogId).to.not.eql(\"\");",
							" pm.expect(jsonData[i].commentDate).to.not.eql(\"\");",
							" pm.expect(jsonData[i].commentCount).to.not.eql(\"\");",
							" pm.expect(jsonData[i].contentType).to.not.eql(\"\");",
							" }",
							" });",
							" }",
							"}",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-TRACE-USER",
						"type": "text",
						"value": "{{user_id}}"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"type": "text",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"type": "text",
						"value": "{{$timestamp}}"
					}
				],
				"url": {
					"raw": "{{lm_url}}/lm/api/v1/search?_format=json&searchTerm=clinique&type=brand",
					"host": [
						"{{lm_url}}"
					],
					"path": [
						"lm",
						"api",
						"v1",
						"search"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "searchTerm",
							"value": "clinique"
						},
						{
							"key": "type",
							"value": "brand"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Classroom",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1ae567df-da44-478a-a866-14911de1d7a0",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//code to Verify Response Headers and their values",
							"pm.test(\"Verify Response Headers\", function () {",
							"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"",
							"",
							"//code to Verify Response Time",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"description\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"blogId\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"imageSmall\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"commentDate\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"commentCount\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"contentType\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"description\",",
							"        \"blogId\",",
							"        \"imageSmall\",",
							"        \"commentDate\",",
							"        \"commentCount\",",
							"        \"contentType\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].title).to.not.eql(\"\");",
							" pm.expect(jsonData[i].description).to.not.eql(\"\");",
							" pm.expect(jsonData[i].blogId).to.not.eql(\"\");",
							" pm.expect(jsonData[i].commentDate).to.not.eql(\"\");",
							" pm.expect(jsonData[i].commentCount).to.not.eql(\"\");",
							" pm.expect(jsonData[i].contentType).to.not.eql(\"\");",
							" }",
							" });",
							" }",
							"}",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-TRACE-USER",
						"type": "text",
						"value": "{{user_id}}"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"type": "text",
						"value": "{{X-TRACE-OPERATION_NALX}}"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"type": "text",
						"value": "{{$timestamp}}"
					}
				],
				"url": {
					"raw": "{{lm_url}}/lm/api/v1/search?_format=json&searchTerm=test&type=module",
					"host": [
						"{{lm_url}}"
					],
					"path": [
						"lm",
						"api",
						"v1",
						"search"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "searchTerm",
							"value": "test"
						},
						{
							"key": "type",
							"value": "module"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Lock and Unlock feature for the Modules",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "86c52630-1830-4510-ad0c-f276c306aa92",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"status\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"status\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/status/{{COE_Module_Id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"status",
						"{{COE_Module_Id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Profile Api",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603e6205-6606-47fb-be32-12c999797451",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"",
							"if(get_username == \"newmansd@mailinator.com\")",
							"{",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"first_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_city\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_region\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"roles\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"groups\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_picture\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"languageCode\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"languageName\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"languageDirection\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"location\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"first_name\",",
							"    \"last_name\",",
							"    \"field_city\",",
							"    \"field_region\",",
							"    \"roles\",",
							"    \"groups\",",
							"    \"user_picture\",",
							"    \"languageCode\",",
							"    \"languageName\",",
							"    \"languageDirection\",",
							"    \"location\"",
							"  ]",
							"}",
							"}",
							"",
							"",
							"else if(get_username == \"FEdnewman@mailinator.com\")",
							"",
							"{",
							"    var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"first_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_city\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"field_region\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"roles\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"groups\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_picture\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"languageCode\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"languageName\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"languageDirection\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"location\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"dateOfBirth\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"first_name\",",
							"    \"last_name\",",
							"    \"field_city\",",
							"    \"field_region\",",
							"    \"roles\",",
							"    \"groups\",",
							"    \"user_picture\",",
							"    \"languageCode\",",
							"    \"languageName\",",
							"    \"languageDirection\",",
							"    \"location\",",
							"    \"dateOfBirth\"",
							"  ]",
							"}",
							"}",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" pm.expect(jsonData.first_name).to.not.eql(\"\");",
							" pm.expect(jsonData.last_name).to.not.eql(\"\");",
							" pm.expect(jsonData.roles).to.not.eql(\"\");",
							" pm.expect(jsonData.groups).to.not.eql(\"\");",
							" pm.expect(jsonData.languageCode).to.not.eql(\"\");",
							" pm.expect(jsonData.languageName).to.not.eql(\"\");",
							"  pm.expect(jsonData.languageDirection).to.not.eql(\"\");",
							" });",
							" }",
							"}",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v3/user/details/{{user_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v3",
						"user",
						"details",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Feedback API for FE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e32ba7e2-9478-4799-b437-8aad056c9cb1",
						"exec": [
							"var get_username = pm.environment.get(\"username\")\r",
							"\r",
							"\r",
							"\r",
							"//Parsing Response in JSON format and storing in a Variable\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"\r",
							"if(get_username == \"FEdnewman@mailinator.com\")\r",
							"{\r",
							" //code to verify Blank Array In Response\r",
							" pm.test(\"Blank Array is there in Response as SD will not get feedback for BA\",function(){\r",
							" pm.expect(jsonData.length).to.eql(0);\r",
							" });\r",
							" }\r",
							"\r",
							"\r",
							"else if(responseCode.code === 200)\r",
							"{\r",
							"\r",
							"if((jsonData.length)!=0)\r",
							"{\r",
							"\r",
							"//call global variable to verify Common Assertions\r",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();\r",
							"\r",
							"\r",
							"\r",
							"//storing schema in a variable\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  ]\r",
							"}  \r",
							"\r",
							"\r",
							" //parsing Response in JSON format and storing in a Variable\r",
							"  var jsonData = JSON.parse(responseBody);\r",
							"   \r",
							"\r",
							"//code to verify schema with Response Body\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//code to verify key value pairs in Response\r",
							"pm.test(\"Verify Keys Value Pairs in API\",function(){\r",
							"pm.expect(jsonData[0]).to.eql(\"KNOWLEDGE: If you aren’t feeling uber-confident about the fragrance, its story, how it builds, the notes, collaborate with your Manager as to what specific branded resources you should review and by what date.  <br />\\r\\n<br />\\r\\n\");\r",
							"pm.expect(jsonData[1]).to.eql(\"KNOWLEDGE: Fragrance is an experience. The storytelling and demonstration is an essential process to matchmaking the fragrance to the customer. Have your Manager demonstrate this process on you and you return the favor by demonstrating on her/him. \");\r",
							"pm.expect(jsonData[2]).to.eql(\"TECHNIQUE: Fragrance lingers longer on hydrated skin. Teach customers to layer the Body Lotion with the Eau de Parfum to make it last. Practice this demonstration through a hand/arm massage on 2-3 colleagues and get their feedback. \");\r",
							"pm.expect(jsonData[3]).to.eql(\"TECHNIQUE: Maybe you’ve mastered the demonstration process your brand offers, but now you want to polish your ability to find the exact right blend/match for your customer. Identify and practice some challenging scenarios with your Manager. For instance, how can you add a more floral flare to a woodsy scent?\");\r",
							"pm.expect(jsonData[4]).to.eql(\"SALES: Increasing your IPT/AUS can be easier than it may seem. For the next 5 customers you see, recommend a product that compliments her initial concern (i.e. if she asks for a foundation suggest a cleanser to help her remove it). You can easily do this by always ask open-ended questions, be curious and actively listen.   \");\r",
							"pm.expect(jsonData[5]).to.eql(\"SALES: Do you sometimes find it hard to ask for the sale? Pick 2-3 roadblocks you’re afraid you’ll hear from a customer and role play how you can handle those with your Manager. \");\r",
							"pm.expect(jsonData[6]).to.eql(\"SALES: Customers who shop with you 2 or more times a year, spend an average of 3x as much money as customers who you only see once! What do you find hardest about clienteling? Do you hate cold calling? Start by calling with a partner, observe and find one thing that feels right for you to try. Put that into play immediately with 3 customers. Maybe you struggle asking for a customer’s information? Put yourself in your customer’s shoes…you’ve just bonded with this salesperson and shared some of your secrets, why wouldn’t you want her to keep the connection going?\");\r",
							"pm.expect(jsonData[7]).to.eql(\"SALES: Every day is a build and each day is important in achieving your long-term goals. If you missed a sales goal one day, what are you doing to ensure you stay on target to achieve the week, the month, the year? Work with your Manager to determine a realistic and achievable plan to stay on track.\");\r",
							"pm.expect(jsonData[8]).to.eql(\"SALES: You’re a pace setter who is never satisfied. How much higher can you reach? Push your limits – work with your Manager to establish a challenge to light your fire!\");\r",
							"\r",
							"});\r",
							"}\r",
							"}\r",
							"\r",
							"else\r",
							"{\r",
							" pm.test(\"Status Code is not 200\",function(){\r",
							" pm.response.to.have.status(\"200\");\r",
							" });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/feedback/fe?_format=json&evaluation_category={{category_Id}}",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"feedback",
						"fe"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "evaluation_category",
							"value": "{{category_Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Evaluation Details Score API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eb3f197f-9be6-4c52-9ec0-411285385160",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"member_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"first_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"role\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"brand_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"brand_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"area\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"region\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"date_of_joining\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"date_of_birth\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_image\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"rank\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_rank_up_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"proficiency_score\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_proficiency_score\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"created_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"updated_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"is_active\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"job_title_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"job_title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"unique_system_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"region_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"door_id\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"door_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"territory_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"snapshot_count\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"super_territory_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"badges_points\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"anniversary_date\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"level_status\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"learner_count\": {",
							"        ",
							"    },",
							"    \"fe_image\": {",
							"    ",
							"    },",
							"    \"fe_name\": {",
							"  ",
							"    },",
							"    \"fe_id\": {",
							"     ",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"member_id\",",
							"    \"user_id\",",
							"    \"first_name\",",
							"    \"last_name\",",
							"    \"role\",",
							"    \"brand_id\",",
							"    \"brand_name\",",
							"    \"area\",",
							"    \"region\",",
							"    \"date_of_joining\",",
							"    \"date_of_birth\",",
							"    \"user_image\",",
							"    \"rank\",",
							"    \"last_rank_up_on\",",
							"    \"proficiency_score\",",
							"    \"last_proficiency_score\",",
							"    \"created_on\",",
							"    \"updated_on\",",
							"    \"is_active\",",
							"    \"job_title_id\",",
							"    \"job_title\",",
							"    \"unique_system_id\",",
							"    \"region_id\",",
							"    \"door_id\",",
							"    \"door_name\",",
							"    \"territory_id\",",
							"    \"snapshot_count\",",
							"    \"super_territory_id\",",
							"    \"badges_points\",",
							"    \"anniversary_date\",",
							"    \"level_status\",",
							"    \"learner_count\",",
							"    \"fe_image\",",
							"    \"fe_name\",",
							"    \"fe_id\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.id).to.not.eql(\"\");    ",
							"pm.expect(jsonData.memberId).to.not.eql(\"\");",
							"pm.expect(jsonData.userId).to.not.eql(\"\");",
							"pm.expect(jsonData.firstName).to.not.eql(\"\");",
							"pm.expect(jsonData.lastName).to.not.eql(\"\");",
							"pm.expect(jsonData.role).to.not.eql(\"\");",
							"pm.expect(jsonData.brandId).to.not.eql(\"\");",
							"pm.expect(jsonData.brandName).to.not.eql(\"\");",
							"pm.expect(jsonData.rank).to.not.eql(\"\");",
							"pm.expect(jsonData.last_rank_up_on).to.not.eql(\"\");",
							"pm.expect(jsonData.proficiencyScore).to.not.eql(\"\");",
							"pm.expect(jsonData.last_proficiency_score).to.not.eql(\"\");",
							"pm.expect(jsonData.created_on).to.not.eql(\"\");",
							"pm.expect(jsonData.is_active).to.not.eql(\"\");",
							"pm.expect(jsonData.job_title_id).to.not.eql(\"\");",
							"pm.expect(jsonData.job_title).to.not.eql(\"\");",
							"pm.expect(jsonData.unique_system_id).to.not.eql(\"\");",
							"pm.expect(jsonData.snapshot_count).to.not.eql(\"\");",
							"pm.expect(jsonData.badges_points).to.not.eql(\"\");",
							"pm.expect(jsonData.learner_count).to.not.eql(\"\");",
							"});",
							"",
							"",
							"",
							"//code to verify some of the static values in response",
							"var get_member_id = pm.environment.get(\"member_id\");",
							"var get_user_id = pm.environment.get(\"user_id\");",
							"pm.test(\"Code to verify some of the static key values in Response\",function()",
							"{",
							"pm.expect(get_member_id).to.eql(jsonData.member_id);",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v2/evaluation/detail-score/user/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v2",
						"evaluation",
						"detail-score",
						"user",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "category for Evaluation with Questions for BA",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "812a5c8b-41e6-434f-922d-6ae33d63e526",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"var get_username = pm.environment.get(\"username\")",
							"",
							"",
							"if(get_username == \"newmansd@mailinator.com\")",
							"{",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"categoryName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryColor\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"brandName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"outerColor\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"categoryName\",",
							"        \"categoryColor\",",
							"        \"categoryImage\",",
							"        \"categoryId\",",
							"        \"brandName\",",
							"        \"outerColor\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" pm.expect(jsonData[0].categoryName).to.not.eql(\"\");",
							" pm.expect(jsonData[0].categoryColor).to.not.eql(\"\");",
							" pm.expect(jsonData[0].categoryImage).to.not.eql(\"\");",
							" pm.expect(jsonData[0].categoryId).to.not.eql(\"\");",
							" pm.expect(jsonData[0].outerColor).to.not.eql(\"\");",
							" });",
							" }",
							"",
							"",
							"",
							"else if(get_username == \"FEdnewman@mailinator.com\")",
							"{",
							"    var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryColor\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"outerColor\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"vertical1\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            }",
							"          ]",
							"        },",
							"        \"vertical2\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            }",
							"          ]",
							"        },",
							"        \"vertical3\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"string\"",
							"            }",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandName\",",
							"        \"categoryId\",",
							"        \"categoryName\",",
							"        \"categoryImage\",",
							"        \"categoryColor\",",
							"        \"outerColor\",",
							"        \"vertical1\",",
							"        \"vertical2\",",
							"        \"vertical3\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" pm.expect(jsonData[0].categoryName).to.not.eql(\"\");",
							" pm.expect(jsonData[0].categoryColor).to.not.eql(\"\");",
							" pm.expect(jsonData[0].categoryImage).to.not.eql(\"\");",
							" pm.expect(jsonData[0].categoryId).to.not.eql(\"\");",
							" pm.expect(jsonData[0].outerColor).to.not.eql(\"\");",
							" pm.expect(jsonData[0].vertical1).to.not.eql(\"\");",
							" pm.expect(jsonData[0].vertical2).to.not.eql(\"\");",
							" pm.expect(jsonData[0].vertical3).to.not.eql(\"\");",
							" });",
							"}",
							"",
							"",
							" ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"}",
							"}",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/assessment/categories/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"assessment",
						"categories",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FE: My perfomance (Spider Graph)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ae70009-27a0-4eaa-8f0d-2126cc9953f8",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"category_id\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"vertical1_avg\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"vertical2_avg\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"vertical3_avg\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"category_color\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"outer_color\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"name\",",
							"        \"category_id\",",
							"        \"vertical1_avg\",",
							"        \"vertical2_avg\",",
							"        \"vertical3_avg\",",
							"        \"category_color\",",
							"        \"outer_color\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData[0].name).to.not.eql(\"\");",
							"pm.expect(jsonData[0].category_id).to.not.eql(\"\");",
							"pm.expect(jsonData[0].vertical1_avg).to.not.eql(\"\");",
							"pm.expect(jsonData[0].vertical2_avg).to.not.eql(\"\");",
							"pm.expect(jsonData[0].vertical3_avg).to.not.eql(\"\");",
							"pm.expect(jsonData[0].category_color).to.not.eql(\"\");",
							"pm.expect(jsonData[0].outer_color).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/evaluation/aggregated-score?_format=json&member_id={{member_id}}&brand_id={{Learner_BrandId}}",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"evaluation",
						"aggregated-score"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "member_id",
							"value": "{{member_id}}"
						},
						{
							"key": "brand_id",
							"value": "{{Learner_BrandId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FE dashbaord My perfomance(Level,Proficency level,Snashot earned)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d81f0418-05f0-4013-b17f-3263e4a831d1",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"member_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"first_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"role\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"brand_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"brand_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"area\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"region\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"date_of_joining\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"date_of_birth\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"user_image\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"rank\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_rank_up_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"proficiency_score\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"last_proficiency_score\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"created_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"updated_on\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"is_active\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"job_title_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"job_title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"unique_system_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"region_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"door_id\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"door_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"territory_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"snapshot_count\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"super_territory_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"badges_points\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"anniversary_date\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"level_status\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"learner_count\": {",
							"    ",
							"    },",
							"    \"fe_image\": {",
							"   ",
							"    },",
							"    \"fe_name\": {",
							"    ",
							"    },",
							"    \"fe_id\": {",
							"     ",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"member_id\",",
							"    \"user_id\",",
							"    \"first_name\",",
							"    \"last_name\",",
							"    \"role\",",
							"    \"brand_id\",",
							"    \"brand_name\",",
							"    \"area\",",
							"    \"region\",",
							"    \"date_of_joining\",",
							"    \"date_of_birth\",",
							"    \"user_image\",",
							"    \"rank\",",
							"    \"last_rank_up_on\",",
							"    \"proficiency_score\",",
							"    \"last_proficiency_score\",",
							"    \"created_on\",",
							"    \"updated_on\",",
							"    \"is_active\",",
							"    \"job_title_id\",",
							"    \"job_title\",",
							"    \"unique_system_id\",",
							"    \"region_id\",",
							"    \"door_id\",",
							"    \"door_name\",",
							"    \"territory_id\",",
							"    \"snapshot_count\",",
							"    \"super_territory_id\",",
							"    \"badges_points\",",
							"    \"anniversary_date\",",
							"    \"level_status\",",
							"    \"learner_count\",",
							"    \"fe_image\",",
							"    \"fe_name\",",
							"    \"fe_id\"",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" pm.expect(jsonData.id).to.not.eql(\"\");",
							" pm.expect(jsonData.member_id).to.not.eql(\"\");",
							" pm.expect(jsonData.user_id).to.not.eql(\"\");",
							" pm.expect(jsonData.first_name).to.not.eql(\"\");",
							" pm.expect(jsonData.last_name).to.not.eql(\"\");",
							" pm.expect(jsonData.role).to.not.eql(\"\");",
							" pm.expect(jsonData.brand_id).to.not.eql(\"\");",
							" pm.expect(jsonData.brand_name).to.not.eql(\"\");",
							" pm.expect(jsonData.rank).to.not.eql(\"\");",
							" pm.expect(jsonData.last_rank_up_on).to.not.eql(\"\");",
							" pm.expect(jsonData.proficiency_score).to.not.eql(\"\");",
							" pm.expect(jsonData.last_proficiency_score).to.not.eql(\"\");",
							" pm.expect(jsonData.is_active).to.not.eql(\"\");",
							" pm.expect(jsonData.job_title_id).to.not.eql(\"\");",
							" pm.expect(jsonData.job_title).to.not.eql(\"\");",
							" pm.expect(jsonData.unique_system_id).to.not.eql(\"\");",
							" pm.expect(jsonData.snapshot_count).to.not.eql(\"\");",
							" pm.expect(jsonData.badges_points).to.not.eql(\"\");",
							" pm.expect(jsonData.learner_count).to.not.eql(\"\");",
							" });",
							" }",
							"}",
							" ",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v2/evaluation/detail-score/user/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v2",
						"evaluation",
						"detail-score",
						"user",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FE Dashboard - My performance (Evaluation PDF)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f64781b6-2573-4f24-98b2-52835d334b20",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"   \"type\": \"object\",",
							"  \"properties\": {",
							"    \"aggr_pdf\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"PFD_link\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"PFD_link\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"aggr_pdf\"",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.aggr_pdf.length, function () {",
							"    count = jsonData.aggr_pdf.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData.aggr_pdf[i].title).to.not.eql(\"\");",
							" pm.expect(jsonData.aggr_pdf[i].PFD_link).to.not.eql(\"\");",
							" }",
							" });",
							" }",
							"}",
							" ",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/proficiency_pdf/{{member_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"proficiency_pdf",
						"{{member_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Leadership Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "904a35cf-9a51-4055-9485-8a7a45dda9b4",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"nid\",",
							"        \"levelImage\",",
							"        \"levelDescription\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelDescription).to.not.eql(\"\");",
							"}",
							"});",
							"",
							"",
							"",
							"//code to fetch first nid and store it in an Environment Variable",
							"pm.environment.set(\"Leadership_level_id\",jsonData[0].nid);",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/education/leadership-level?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"education",
						"leadership-level"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Leadership module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d23bcff7-2b02-4683-9845-b7bf21251a34",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myLeadershipDescription\": {",
							"          \"type\": \"null\"",
							"        },",
							"        \"myLeadershipImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"moduleCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myLeadershipFiles\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleDuration\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"myLeadershipDescription\",",
							"        \"myLeadershipImage\",",
							"        \"progress\",",
							"        \"moduleCategory\",",
							"        \"moduleType\",",
							"        \"myLeadershipFiles\",",
							"        \"moduleDuration\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myLeadershipImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");",
							"pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myLeadershipFiles).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-USER",
						"value": "{{user_id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/leadership/{{Leadership_level_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"leadership",
						"{{Leadership_level_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Policies Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7ccfd06-2534-4b44-9a89-308887680444",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"nid\",",
							"        \"levelImage\",",
							"        \"levelDescription\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelDescription).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"",
							"",
							"//code to fetch first nid and store it in an Environment Variable",
							"pm.environment.set(\"Policies_level_id\",jsonData[0].nid);",
							"",
							"",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/education/policies-level?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"education",
						"policies-level"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Policies Module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5412b84c-a422-411f-a8ed-957544fb3307",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myPoliciesDescription\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myPoliciesImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"moduleCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myPoliciesFiles\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleDuration\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"myPoliciesDescription\",",
							"        \"myPoliciesImage\",",
							"        \"progress\",",
							"        \"moduleCategory\",",
							"        \"moduleType\",",
							"        \"myPoliciesFiles\",",
							"        \"moduleDuration\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myPoliciesDescription).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myPoliciesImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");",
							"pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myPoliciesFiles).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/policies/{{Policies_level_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"policies",
						"{{Policies_level_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json  "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Culture Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd24d57c-9518-4d39-9860-1330c09688a7",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"nid\",",
							"        \"levelImage\",",
							"        \"levelDescription\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].levelDescription).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"",
							"",
							"//code to fetch first nid and store it in an Environment Variable",
							"pm.environment.set(\"Culture_level_id\",jsonData[0].nid);",
							"",
							"",
							"",
							"",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/education/culture-level?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"education",
						"culture-level"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Culture Module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2198dba-d618-435c-8e28-a2442aef9797",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myCultureDescription\": {",
							"          \"type\": \"null\"",
							"        },",
							"        \"myCultureImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"moduleCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myCultureFiles\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleDuration\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"myCultureDescription\",",
							"        \"myCultureImage\",",
							"        \"progress\",",
							"        \"moduleCategory\",",
							"        \"moduleType\",",
							"        \"myCultureFiles\",",
							"        \"moduleDuration\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myCultureDescription).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myCultureImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");",
							"pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myCultureFiles).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/culture/{{Culture_level_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"culture",
						"{{Culture_level_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Business Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "13691121-1ef6-4245-a458-4dfe470479e5",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"     \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelDescription\": {",
							"          \"type\": \"null\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"nid\",",
							"        \"levelImage\",",
							"        \"levelDescription\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].title).to.not.eql(\"\");",
							" pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							" pm.expect(jsonData[i].levelImage).to.not.eql(\"\");",
							" }",
							" });",
							" ",
							" //code to fetch first nid and store it in an Environment Variable",
							"pm.environment.set(\"Business_level_id\",jsonData[0].nid);",
							" }",
							"}",
							"",
							"",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/education/business-level?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"education",
						"business-level"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Businees Module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cdb1ce6-1849-42ee-8455-c568c8c80a9c",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myBusinessDescription\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myBusinessImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"moduleCategory\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"myBusinessFiles\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleDuration\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"nid\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"myBusinessDescription\",",
							"        \"myBusinessImage\",",
							"        \"progress\",",
							"        \"moduleCategory\",",
							"        \"moduleType\",",
							"        \"myBusinessFiles\",",
							"        \"moduleDuration\",",
							"        \"nid\"",
							"      ]",
							"    }",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Result",
							" pm.test('Count of Objects in Result = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData[i].title).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myBusinessDescription).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myBusinessImage).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleType).to.not.eql(\"\");",
							"pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							"pm.expect(jsonData[i].moduleCategory).to.not.eql(\"\");",
							"pm.expect(jsonData[i].myBusinessFiles).to.not.eql(\"\");",
							"pm.expect(jsonData[i].nid).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/modules/business/{{Business_level_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"modules",
						"business",
						"{{Business_level_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Learner Level search ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9c0dfd5d-89e6-4910-8cff-fe3ecc6f42a3",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//code to Verify Response Headers and their values",
							"pm.test(\"Verify Response Headers\", function () {",
							"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"",
							"",
							"//code to Verify Response Time",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"title\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"description\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"category\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"type\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"progress\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"duration\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"imageSmall\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"file\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"level\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"moduleId\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"contentType\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"levelId\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"title\",",
							"        \"description\",",
							"        \"category\",",
							"        \"type\",",
							"        \"progress\",",
							"        \"duration\",",
							"        \"imageSmall\",",
							"        \"file\",",
							"        \"level\",",
							"        \"moduleId\",",
							"        \"contentType\",",
							"        \"levelId\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].title).to.not.eql(\"\");",
							" pm.expect(jsonData[i].category).to.not.eql(\"\");",
							" pm.expect(jsonData[i].type).to.not.eql(\"\");",
							" pm.expect(jsonData[i].progress).to.not.eql(\"\");",
							" pm.expect(jsonData[i].level).to.not.eql(\"\");",
							" pm.expect(jsonData[i].moduleId).to.not.eql(\"\");",
							" pm.expect(jsonData[i].contentType).to.not.eql(\"\");",
							" pm.expect(jsonData[i].levelId).to.not.eql(\"\");",
							" }",
							" });",
							"}",
							"}",
							"",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{lm_url}}/lm/api/v1/search?searchTerm={{COE_Title}}&type=module",
					"host": [
						"{{lm_url}}"
					],
					"path": [
						"lm",
						"api",
						"v1",
						"search"
					],
					"query": [
						{
							"key": "searchTerm",
							"value": "{{COE_Title}}"
						},
						{
							"key": "type",
							"value": "module"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Static Translation API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "50dba019-aea9-4ce7-83a3-c3c578556e2e",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"statusErr\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"statusErr\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"notFoundPageText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"notFoundPageText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"aboutTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"aboutTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"accountsTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"accountsTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"additionalCommentsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"additionalCommentsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"advanceText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"advanceText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"advancedLearningTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"advancedLearningTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"historyFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"historyFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allBadgesTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allBadgesTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allBadgesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allBadgesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allBrandsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allBrandsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allDoorsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allDoorsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allLearnersLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allLearnersLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allRegionsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allRegionsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allSeminarsLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allSeminarsLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allSnapshotLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allSnapshotLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allFbGroupLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allFbGroupLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allFeatureLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allFeatureLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allLeadershipText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allLeadershipText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allSpGroupLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allSpGroupLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"allTopLearnersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"allTopLearnersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"emailSentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"emailSentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"anniversaryText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"anniversaryText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"archiveTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"archiveTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"deleteCommentMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"deleteCommentMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"attachDocumentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"attachDocumentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"attachNewDocMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"attachNewDocMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"avgPerMonthText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"avgPerMonthText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"awardBadgeText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"awardBadgeText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"awardBadgesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"awardBadgesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"awardedByText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"awardedByText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeAllocatedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeAllocatedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeAllocationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeAllocationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgesAllocationMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgesAllocationMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeCategoryText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeCategoryText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgePointsAwardedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgePointsAwardedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgePtsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgePtsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgesAwardedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgesAwardedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgesAwardedToLearnerText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgesAwardedToLearnerText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgesFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgesFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"basicTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"basicTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"basicLearningTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"basicLearningTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"ratingBeginingText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"ratingBeginingText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"birthdayText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"birthdayText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"blogDetailText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"blogDetailText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"blogsTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"blogsTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandLinkName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandLinkName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandValuesTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandValuesTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noBrandValuesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noBrandValuesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandListLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandListLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandsLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandsLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"businessTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"businessTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"buttonName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"buttonName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"calendarName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"calendarName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"cancelName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"cancelName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"categoryName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"categoryName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"changeLangText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"changeLangText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"classroomTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"classroomTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"clearAllText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"clearAllText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"coachText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"coachText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"coachingRecommendText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"coachingRecommendText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"ratingComfortableText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"ratingComfortableText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"comingSoonText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"comingSoonText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"commentsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"commentsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"completedLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"completedLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"confirmText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"confirmText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"badgeAwardText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"badgeAwardText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"congratulationsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"congratulationsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"ratingConsistentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"ratingConsistentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"consumersTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"consumersTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"continueText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"continueText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"courseLockedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"courseLockedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"cultureTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"cultureTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noSeminarsRegionText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noSeminarsRegionText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"dashboardFeaturedLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"dashboardFeaturedLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"daysLeftText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"daysLeftText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"deleteText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"deleteText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"detailedViewText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"detailedViewText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsMyDevText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsMyDevText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsLeadershipText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsLeadershipText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsSelfDevText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsSelfDevText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsAccText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsAccText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsMyAccText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsMyAccText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsBusinessText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsBusinessText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsCOEsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsCOEsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsConsumersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsConsumersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsCultureText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsCultureText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsPoliciesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsPoliciesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsRoleText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsRoleText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentsToolsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentsToolsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"doneText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"doneText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"ratingEarlyText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"ratingEarlyText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"editText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"editText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"educationName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"educationName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"educationTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"educationTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"educationInfoText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"educationInfoText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noEducationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noEducationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"elcBrandName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"elcBrandName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"emailName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"emailName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"emailLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"emailLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"emailBodyEmptyText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"emailBodyEmptyText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"englishLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"englishLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"errorText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"errorText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"loginError\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"loginError\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"establishedPerformerText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"establishedPerformerText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"evaluateName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"evaluateName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"evaluateError\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"evaluateError\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"evaluationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"evaluationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"evaluatorText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"evaluatorText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"influenceText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"influenceText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"exitEvaluationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"exitEvaluationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"experiencesTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"experiencesTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noExperiencesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noExperiencesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"featuredText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"featuredText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"featuredProductText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"featuredProductText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"featuredProductsTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"featuredProductsTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"featuredProductsAvalText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"featuredProductsAvalText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"fieldExecutiveText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"fieldExecutiveText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"filterText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"filterText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"frenchLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"frenchLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"fiscalYearText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"fiscalYearText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"goBackText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"goBackText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"gotoHomeText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"gotoHomeText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"goalManagementText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"goalManagementText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"promotionMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"promotionMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"troubleLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"troubleLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"hiText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"hiText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"historyText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"historyText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"inFocusTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"inFocusTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandErrMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandErrMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"infocusName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"infocusName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noInfocusText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noInfocusText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"infoBrandValuesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"infoBrandValuesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"infocusAvailableText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"infocusAvailableText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"experiencesAvailText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"experiencesAvailText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"resourcesInfoText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"resourcesInfoText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"intermediateText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"intermediateText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"interPerformerText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"interPerformerText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"recentEvaluationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"recentEvaluationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"itemName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"itemName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"joinedOnText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"joinedOnText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"rememberMeLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"rememberMeLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"knowledgeText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"knowledgeText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"errMsgLanguage\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"errMsgLanguage\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"leaderboardText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"leaderboardText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"leadershipTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"leadershipTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noLeadershipText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noLeadershipText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnerText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnerText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnerBrandDistribText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnerBrandDistribText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnerProficiencyDistribText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnerProficiencyDistribText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnerPhotoName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnerPhotoName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnersBATab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnersBATab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnersFETab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnersFETab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnersNameText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnersNameText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnersSelectedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnersSelectedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learningExperienceLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learningExperienceLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learningSnapshotText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learningSnapshotText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"leastAwardedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"leastAwardedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"leaveCommentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"leaveCommentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"levelLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"levelLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"promotionLevelMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"promotionLevelMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"promotionText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"promotionText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"promotedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"promotedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"loadingName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"loadingName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"logoutText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"logoutText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"masterText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"masterText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"moduleCompletedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"moduleCompletedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"moduleRecommendedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"moduleRecommendedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"modulesCompletedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"modulesCompletedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"modulesRecommendToText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"modulesRecommendToText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"modulesSelectedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"modulesSelectedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"moreResultsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"moreResultsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"mostAwardedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"mostAwardedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"mostAwardedCatText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"mostAwardedCatText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"mostRecentEvaluationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"mostRecentEvaluationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myAccountsTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myAccountsTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myBadgesLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myBadgesLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myCOEsTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myCOEsTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myCompletedModulesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myCompletedModulesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myDevelopmentTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myDevelopmentTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myEarnedBadgesTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myEarnedBadgesTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myGroupLink\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myGroupLink\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myLearnersLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myLearnersLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myPerformanceText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myPerformanceText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myProfileText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myProfileText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myRecommendationsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myRecommendationsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myRoleTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myRoleTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myTeamText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myTeamText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myTeamDetailsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myTeamDetailsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myTeamStatistics\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myTeamStatistics\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"myTopLearnersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"myTopLearnersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"nalxName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"nalxName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"supportEmailLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"supportEmailLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"newLearnersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"newLearnersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"newThisYearLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"newThisYearLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"nextText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"nextText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noBadgesAwardedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noBadgesAwardedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noBadgesAwardedYetText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noBadgesAwardedYetText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noBadgesFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noBadgesFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noBlogsAvailText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noBlogsAvailText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noBrandFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noBrandFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"nocategoriesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"nocategoriesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noCommentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noCommentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noCompletedModulesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noCompletedModulesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDataSelectionText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDataSelectionText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDataSelectedFilter\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDataSelectedFilter\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDocumentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDocumentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noDoorsFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noDoorsFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noFbGroupText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noFbGroupText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noFeatureLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noFeatureLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noFeaturedProductsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noFeaturedProductsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noFeedbackSuggestText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noFeedbackSuggestText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noHistoryFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noHistoryFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noImageAttachedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noImageAttachedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noLearnersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noLearnersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noLearnersFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noLearnersFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noMapAvailableText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noMapAvailableText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noModulesAvailableText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noModulesAvailableText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noModulesRecommendText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noModulesRecommendText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noModulesToRecommendText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noModulesToRecommendText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noRecentActivityText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noRecentActivityText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noRecentEvaluationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noRecentEvaluationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noRegionsFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noRegionsFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noRelevantInfoText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noRelevantInfoText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noSeminarsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noSeminarsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noSpGroupText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noSpGroupText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noSocialAccText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noSocialAccText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noTeamMemberText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noTeamMemberText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noTopLearnersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noTopLearnersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noUpcomingSeminarsLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noUpcomingSeminarsLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"northAmericaLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"northAmericaLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"notApplicableText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"notApplicableText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"notAssessedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"notAssessedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"notificationName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"notificationName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"notificationsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"notificationsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noviceText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noviceText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noofBadgesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noofBadgesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"avgMonthlyText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"avgMonthlyText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"notFormattedImage\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"notFormattedImage\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"openModalText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"openModalText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"otherLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"otherLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"outofText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"outofText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"overText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"overText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"passwordLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"passwordLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"peopleInvitedLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"peopleInvitedLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"performanceDashboardText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"performanceDashboardText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"personInvitedLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"personInvitedLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"placeText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"placeText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"unlockAdvModuleMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"unlockAdvModuleMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"verifyRecipientText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"verifyRecipientText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"pointsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"pointsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"policiesTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"policiesTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"privacyPolicyText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"privacyPolicyText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"policyUnavailableText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"policyUnavailableText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"productName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"productName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"proficiencyLevelLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"proficiencyLevelLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"profileText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"profileText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"profileBackgroundImageName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"profileBackgroundImageName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"profileImageName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"profileImageName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"pushingForExcellenceText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"pushingForExcellenceText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"questionText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"questionText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"facebookGroupsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"facebookGroupsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"readMoreText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"readMoreText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"readyToLearnText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"readyToLearnText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"readyToTeachOthersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"readyToTeachOthersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"ratingReadyText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"ratingReadyText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"recentActivitiesLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"recentActivitiesLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"recommendText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"recommendText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"recommendModulesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"recommendModulesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"recommendedbyText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"recommendedbyText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"regionsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"regionsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"resourceTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"resourceTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"resourcesTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"resourcesTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noResourcesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noResourcesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"reviewName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"reviewName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"reviewAvgScoreText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"reviewAvgScoreText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"salesResultText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"salesResultText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"searchName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"searchName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"searchResultsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"searchResultsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"searchTermText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"searchTermText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"searchText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"searchText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"sectionText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"sectionText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"selectText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"selectText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"selectOptionText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"selectOptionText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"selectBadgesMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"selectBadgesMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"selectBrandText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"selectBrandText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"selectDoorText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"selectDoorText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"selectRegionText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"selectRegionText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"selectSeminarText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"selectSeminarText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"selfDevelopmentTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"selfDevelopmentTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"mapAvailableText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"mapAvailableText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"seminarsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"seminarsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"sendText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"sendText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"sendingRecommendText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"sendingRecommendText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"sessionExpiredLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"sessionExpiredLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"signInLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"signInLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"sinceText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"sinceText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"snapshotText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"snapshotText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"snapshotsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"snapshotsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"snapshotsPerformedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"snapshotsPerformedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"socialIconName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"socialIconName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"somethingWentWrongMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"somethingWentWrongMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"spanishLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"spanishLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"startToSoarText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"startToSoarText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"statusText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"statusText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"subText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"subText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"submitText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"submitText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"subtitleText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"subtitleText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"successName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"successName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"categoryForEvaluationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"categoryForEvaluationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"techniqueServiceText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"techniqueServiceText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"anotherErrText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"anotherErrText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noEngageStoriesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noEngageStoriesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noNewnessNotifiText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noNewnessNotifiText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"noUpcomingSeminarsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"noUpcomingSeminarsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"errPostedCommentMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"errPostedCommentMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"moduleCurrLockText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"moduleCurrLockText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"titleText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"titleText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"promotionToLevelMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"promotionToLevelMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"unlockAdvLearningText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"unlockAdvLearningText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"toolsTab\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"toolsTab\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"topBeautyAdvisorsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"topBeautyAdvisorsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"topFieldExecutivesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"topFieldExecutivesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"topLearnersName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"topLearnersName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"topLearnersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"topLearnersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"totalAvailableText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"totalAvailableText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"totalBadgesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"totalBadgesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"totalLearnersText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"totalLearnersText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"totalModulesCompletedText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"totalModulesCompletedText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"totalSnapshotsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"totalSnapshotsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"tryAgainText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"tryAgainText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"errorTemplateMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"errorTemplateMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"emptyTemplateMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"emptyTemplateMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"upcomingLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"upcomingLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"upcomingSeminarsLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"upcomingSeminarsLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"updateText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"updateText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"updateBirthdate\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"updateBirthdate\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"uploadPictureText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"uploadPictureText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"uploadProfilePicMsg\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"uploadProfilePicMsg\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"userName\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"userName\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"viewText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"viewText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"viewAllLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"viewAllLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"viewDetailsText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"viewDetailsText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"viewDocumentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"viewDocumentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"viewExistingDocumentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"viewExistingDocumentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"viewSplashLabel\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"viewSplashLabel\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"visitText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"visitText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"visitTalentBankText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"visitTalentBankText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"whatNewText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"whatNewText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"notifyEvaluationText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"notifyEvaluationText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"writeCommentText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"writeCommentText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"writeMsgText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"writeMsgText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"yesText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"yesText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"enterValidEmailText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"enterValidEmailText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"learnersFoundText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"learnersFoundText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"ratingGreatStartText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"ratingGreatStartText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"browserNotSupportVideo\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"browserNotSupportVideo\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"ratingExpertiseText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"ratingExpertiseText\"",
							"      ]",
							"    },",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"ratingSavvyText\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"ratingSavvyText\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							" }",
							" ",
							"}",
							" ",
							" else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "Application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/translationKey?_format=json&languageCode=en",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"translationKey"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "languageCode",
							"value": "en"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "stateTerritoryProvinceDropdown",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Notification",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a401b7a4-fc37-459a-92b9-83a1babf7a7f",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//code to verify Response Time",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"",
							"",
							"",
							"//code to Verify Content-Type Response Header and its value",
							"{",
							"pm.test(\"Verify Response Headers\", function () {",
							"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
							"});",
							"",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"notificationsCount\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"notifications\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"notificationType\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"userId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"notificationHeading\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"notificationText\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"notificationIcon\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"notificationDate\": {",
							"              \"type\": \"integer\"",
							"            },",
							"            \"notificationClassroomContentId\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"notificationId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"category\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"contentType\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"notificationBrandId\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"notificationLink\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"notificationLinkType\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"notificationFlag\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"notificationType\",",
							"            \"userId\",",
							"            \"notificationHeading\",",
							"            \"notificationText\",",
							"            \"notificationIcon\",",
							"            \"notificationDate\",",
							"            \"notificationClassroomContentId\",",
							"            \"notificationId\",",
							"            \"category\",",
							"            \"contentType\",",
							"            \"notificationBrandId\",",
							"            \"notificationLink\",",
							"            \"notificationLinkType\",",
							"            \"notificationFlag\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"notificationsCount\",",
							"    \"notifications\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in Notifications",
							" pm.test('Count of Objects in Notifications = '+jsonData.notifications.length, function () {",
							"    count = jsonData.notifications.length;",
							"    });",
							"",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"for(i=0;i<count;i++)",
							"{",
							"pm.expect(jsonData.notifications[i].notificationType).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].userId).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].notificationHeading).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].notificationText).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].notificationIcon).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].notificationDate).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].notificationId).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].contentType).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].notificationLink).to.not.eql(\"\");",
							"pm.expect(jsonData.notifications[i].notificationLinkType).to.not.eql(\"\");",
							"}",
							"});",
							"}",
							"",
							"",
							"//code to fetch value of notifications Count and compare with Count in Array of Notifications",
							"pm.test(\"Compare value of notifications Count with Count in Array of Notifications\",function(){",
							" pm.expect(count).to.eql(jsonData.notificationsCount);",
							"});",
							"}",
							"}",
							"",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-TRACE-REQUESTID",
						"value": "{{$timestamp}}",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "{{X-TRACE-OPERATION_NALX}}",
						"type": "text"
					},
					{
						"key": "X-TRACE-OPERATION",
						"value": "DASHBOARD",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-TRACE-USER",
						"value": "210487",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{lm_url}}/lm/api/v1/notification?_format=json",
					"host": [
						"{{lm_url}}"
					],
					"path": [
						"lm",
						"api",
						"v1",
						"notification"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Share point API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f80ca4b6-08e8-434e-ab84-753396569626",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"sharepoints\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"market_name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"tid\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"sharepoint_link\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"sharepoint_link_title\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"market_name\",",
							"            \"tid\",",
							"            \"sharepoint_link\",",
							"            \"sharepoint_link_title\"",
							"          ]",
							"        }",
							"      ]",
							"    },",
							"    \"fb_groups\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"title\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"fbImage\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"fbLink\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"title\",",
							"            \"fbImage\",",
							"            \"fbLink\"",
							"          ]",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"sharepoints\",",
							"    \"fb_groups\"",
							"  ]",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of sharepoints",
							" pm.test('Count of Objects in array of sharepoints = '+jsonData.sharepoints.length,function () {",
							"    count = jsonData.sharepoints.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null in sharepoints",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData.sharepoints[i].market_name).to.not.eql(\"\");",
							" pm.expect(jsonData.sharepoints[i].tid).to.not.eql(\"\");",
							" pm.expect(jsonData.sharepoints[i].sharepoint_link).to.not.eql(\"\");",
							" pm.expect(jsonData.sharepoints[i].sharepoint_link_title).to.not.eql(\"\");",
							" }",
							" });",
							" ",
							" ",
							" //below code is to count the number of Objects in array of fb_groups",
							" pm.test('Count of Objects in array of sharepoints = '+jsonData.fb_groups.length,function () {",
							"    count = jsonData.fb_groups.length;",
							"    });",
							"    ",
							"   ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null in fb_groups",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData.fb_groups[i].title).to.not.eql(\"\");",
							" pm.expect(jsonData.fb_groups[i].fbImage).to.not.eql(\"\");",
							" pm.expect(jsonData.fb_groups[i].fbLink).to.not.eql(\"\");",
							" }",
							" });",
							" ",
							" ",
							" ",
							" }",
							"}",
							" ",
							" ",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_key}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					},
					{
						"key": "Accep",
						"value": "Application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/sharepoints?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"sharepoints"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "brand category List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4c0f0440-9457-4987-8e65-08373009838b",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"    ",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"brandName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryId\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryImage\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"categoryColor\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"knowledge\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"technique\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"sales\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"outerColor\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"brandName\",",
							"        \"categoryId\",",
							"        \"categoryName\",",
							"        \"categoryImage\",",
							"        \"categoryColor\",",
							"        \"knowledge\",",
							"        \"technique\",",
							"        \"sales\",",
							"        \"outerColor\"",
							"      ]",
							"    }",
							"  ]  ",
							"}",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"  var jsonData = JSON.parse(responseBody);",
							"   ",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"",
							"//below code is to count the number of Objects in array of Results",
							" pm.test('Count of Objects in array of Results = '+jsonData.length, function () {",
							"    count = jsonData.length;",
							"    });",
							"    ",
							"    ",
							"    ",
							"//code to verify values of keys that cannot be set as null",
							" pm.test(\"Value of the keys that cannot be set as null\",function(){",
							" for(i=0;i<count;i++)",
							" {",
							" pm.expect(jsonData[i].brandName).to.not.eql(\"\");",
							" pm.expect(jsonData[i].categoryId).to.not.eql(\"\");",
							" pm.expect(jsonData[i].categoryName).to.not.eql(\"\");",
							" pm.expect(jsonData[i].categoryImage).to.not.eql(\"\");",
							" pm.expect(jsonData[i].categoryColor).to.not.eql(\"\");",
							" pm.expect(jsonData[i].knowledge).to.not.eql(\"\");",
							" pm.expect(jsonData[i].technique).to.not.eql(\"\");",
							" pm.expect(jsonData[i].sales).to.not.eql(\"\");",
							" pm.expect(jsonData[i].outerColor).to.not.eql(\"\");",
							" }",
							" });",
							" }",
							"}",
							" ",
							" ",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/brand/categories/{{brand_id}}?_format=json",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"brand",
						"categories",
						"{{brand_id}}"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post - OKTA Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15bbd16c-ca78-4f7c-bd8c-8ab65d343db8",
						"exec": [
							"if(responseCode.code === 200)",
							"{",
							"",
							"    ",
							"//Parsing Response in JSON format and storing in a Variable",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"//code to verify Blank Array In Response",
							" pm.test(\"Blank Response Verification\",function(){",
							" pm.expect(jsonData.length).to.not.eql(0);",
							" });",
							"",
							"",
							"if((jsonData.length)!=0)",
							"{",
							"",
							"",
							"//call global variable to verify Common Assertions",
							"eval(pm.globals.get(\"CommonTests_NALX\"))();",
							"",
							"",
							"",
							"//storing schema in a variable",
							"var schema={",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"okta_logout_url\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"okta_logout_url\"",
							"  ]",
							"}  ",
							"",
							"",
							" //parsing Response in JSON format and storing in a Variable",
							"   var jsonData = JSON.parse(responseBody);",
							"   ",
							"",
							"//code to verify schema with Response Body",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
							"});",
							"",
							"",
							"//code to verify values of keys that cannot be set as null",
							"pm.test(\"Value of the keys that cannot be set as null\",function(){",
							"pm.expect(jsonData.okta_logout_url).to.not.eql(\"\");",
							"});",
							"}",
							"}",
							"",
							"else",
							"{",
							" pm.test(\"Status Code is not 200\",function(){",
							" pm.response.to.have.status(\"200\");",
							" });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"token\" : \"{{access_key}}\",\r\n\"id_token\" : \"https://dev-857770.okta.com/oauth2/v1/authorize?client_id=0oaidu450QY2Ke0nh356&redirect_uri=https%3A%2F%2Fuat-nalx.elcompanies.com%2F&response_type=id_token+token&response_mode=form_post&state=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NGI1ZDE4YS02MGRmLTQ4ZWItYTQ2Ny1jNDJkMjJkY2E1N2EiLCJqdGkiOiIwMWNiYjRmZTRiMzA1NTQ1MGE3OTBmMzAxNDcyMjA3NGUyYjYyNjA2ODEzYWI1YzlmYzQyMDEyOWViNWMzYzQ2OGRjZTljOGE5ZjQ4ZjRiZiIsImlhdCI6MTU4ODY1NTU2OSwibmJmIjoxNTg4NjU1NTY5LCJleHAiOjE1ODk1MTk1NjksInN1YiI6IjIxMDQ4MyIsInNjb3BlcyI6WyJhdXRoZW50aWNhdGVkIl19.SbeiExQ0W74fvSpMJ09q1mjgY-BytPHC-Z9CKS7vGVhDEXv4qaONzfLXwzI0uCxPHMz6SAJB_0y_tEev9QlN8k5-2RHhe9YD1b467R0ItyK0-kRnOqlShmpR9JY7Fc9ac1Wcf9skxnmPW1m-9rm7QXx8JAJhfFknAQBCd1slpl-KxvAIInIESbiBnpYDstpt4LgHpKtv42M9PKdJCLN7xtWhVgsoKD2TGxD3J0GD3Wc_7YVa8azMPeV4gSOIfvh1mAWESiHmir1LopPXldVXQEzikKZgER7UxVNA9sl2q187o-JLq3PpUhKB9AimIX_kaGGPNFu7L87kxY27qqSkfA&nonce=99357705&sessionToken=20111udz31mJke9BB5bXVcjChenxgLLqAlnbOtjqmtICewv1w1BZm8F&scope=openid+offline_access\"\r\n}"
				},
				"url": "{{protocol}}{{hostname}}/api/v1/logout/oauth/okta"
			},
			"response": []
		},
		{
			"name": "GET Role Switcher",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "POST Switcher user role",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Forgot password",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "SignupText",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "POST validation Email",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Captcha key",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "JobTitledropdownList",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Achievement Stamp API",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "ola pic configuration",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "POST Social Flag API",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Social Activity",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Bookmarks listing",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Learning Path",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Generic Learning Path",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token_type}} {{access_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}{{hostname}}/api/v1/learningPath?_format=json&learningPathId=0&levelId=4519",
					"host": [
						"{{protocol}}{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"learningPath"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						},
						{
							"key": "learningPathId",
							"value": "0"
						},
						{
							"key": "levelId",
							"value": "4519"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Support Detail",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "User Profile Menu",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Learner Profile Pic Update",
			"request": {
				"method": "GET",
				"header": [],
				"url": "",
				"description": "To update Beauty Adviser profile picture.\r\n"
			},
			"response": []
		},
		{
			"name": "Assign Badge to BA",
			"request": {
				"method": "GET",
				"header": [],
				"url": "",
				"description": "To assign Badge to given Beauty Adviser id."
			},
			"response": []
		},
		{
			"name": "Year Filter",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Modules status",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Content Sharable URL",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Brand Product Info (UPC)",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Notification Status",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Achievement_ComingSoon",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		},
		{
			"name": "Seminar Access Token",
			"request": {
				"method": "GET",
				"header": [],
				"url": ""
			},
			"response": []
		}
	]
}